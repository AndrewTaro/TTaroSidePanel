(def constant TT_TEAMPANEL_INSTALLED "true")

(def constant TP_PLAYER_ROW_SIZE {
	WIDTH: 200,
	HEIGHT: 27
})
(def constant TP_SHIPCONFIG_ELEMENT_WIDTH {
	WITH_UNIT: 48,
	NO_UNIT: 32
})
(def constant TP_TOOLTIP_ELEMENTS_VGAP "5px")
(def constant TP_DIVISION_ELEMENT_WIDTH "20px")
(def constant TP_CONFIG_ELEMENTS_VGAP "3px")
(def constant TP_FLAGSHIP_COLOR_TRANSFORM {
	'ally'	: {redOffset: -256,	greenOffset: -127,	blueOffset: -0},	# blue-ish
	'enemy'	:{redOffset: -51,	greenOffset: -51,	blueOffset: -256},	# yellow-ish
})

#--------------------------------------------------------------------------------
(def constant TP_PREFS {
	#GENERAL
	STATS_ALT_VISIBLE	: {KEY:	'ttTeamPanelShipStatsVisibleOnAlt',		DEFAULT: false},
	UNITS_VISIBLE		: {KEY: 'ttTeamPanelShipStatsUnitsVisible',		DEFAULT: true},
	STATS_BOLD_FONT		: {KEY: 'ttTeamPanelShipStatsUseBoldFont',		DEFAULT: false},
	POS_OFFSET			: {KEY: 'ttTeamPanelPosOffset',					DEFAULT: 160.0,	MODIFIER: 10.0,	OFFSET: 110.0},
	SCALE_OFFSET		: {KEY: 'ttTeamPanelScaleOffset',				DEFAULT: 1.0,	MODIFIER: 0.1,	OFFSET: 0.5},
	BLUR_MODE			: {KEY: 'ttTeamPanelBlurMode',					DEFAULT: false},
	BLUR_ALT_VISIBLE	: {KEY: 'ttTeamPanelBlurVisibleOnAlt',			DEFAULT: false},
	BLUR_ALPHA			: {KEY: 'ttTeamPanelBlurOpacity',				DEFAULT: 0.0,	MODIFIER: 0.1,	OFFSET: 0.0},
	DEAD_PLAYER_VISIBLE	: {KEY: 'ttTeamPanelDeadPlayerVisible',			DEFAULT: true},
	#NAMES
	CLAN_NAME			: {KEY: 'ttTeamPanelClanNameVisible',			DEFAULT: true},
	CLAN_ICON			: {KEY: 'ttTeamPanelClanIconVisible',			DEFAULT: false},
	PLAYER_NAME			: {KEY: 'ttTeamPanelPlayerNameVisible',			DEFAULT: true},
	KILL_COUNT			: {KEY: 'ttTeamPanelPlayerKillsVisible',		DEFAULT: true},
	SHIP_NAME			: {KEY: 'ttTeamPanelShipNameVisible',			DEFAULT: true},
	SHIP_TIER			: {KEY: 'ttTeamPanelShipTierVisible',			DEFAULT: true},
	PREMIUM_TIER		: {KEY: 'ttTeamPanelHighlightPremiumTier',		DEFAULT: false},
	SHIP_NATION			: {KEY: 'ttTeamPanelShipNationVisible',			DEFAULT: false},
	SHIP_ICON			: {KEY: 'ttTeamPanelShipIconVisible',			DEFAULT: true},
	SHIP_ICON_COLOR		: {KEY: 'ttTeamPanelShipIconColorPreset',		DEFAULT: 0,		MODIFIER: 1,	OFFSET: 0},
	SHIP_DETECTION		: {KEY: 'ttTeamPanelShipDetectionVisible',		DEFAULT: true},
	HEALTHBAR_OPACITY	: {KEY: 'ttTeamPanelHealthBarOpacity',			DEFAULT: 0.4,	MODIFIER: 0.1,	OFFSET: 0},
	HEALTHBAR_WIDTH		: {KEY: 'ttTeamPanelHealthBarWidth',			DEFAULT: 1.0,	MODIFIER: 0.1,	OFFSET: 0.5},
	TEAM_CONSUMABLES	: {KEY: 'ttTeamPanelTeamConsumablesVisible',	DEFAULT: false},
	#SHIPCONFIGS
	#Artillery
	ARTILLERY_RANGE		: {KEY: 'ttTeamPanelArtilleryRangeVisible',		DEFAULT: true},
	ARTILLERY_RELOAD	: {KEY: 'ttTeamPanelArtilleryReloadVisible',	DEFAULT: true},
	#Torpedo
	TORPEDO_RANGE		: {KEY: 'ttTeamPanelTorpedoRangeVisible',		DEFAULT: true},
	#ATBA
	ATBA_RANGE			: {KEY: 'ttTeamPanelAtbaRangeVisible',			DEFAULT: true},
	#AntiAir
	ANTIAIR_RANGE		: {KEY: 'ttTeamPanelAntiAirRangeVisible',		DEFAULT: true},
	ANTIAIR_RATE		: {KEY: 'ttTeamPanelAntiAirRateVisible',		DEFAULT: true},
	#AirSupport
	AIRSUPPORT_RANGE	: {KEY: 'ttTeamPanelAirSupportRangeVisible',	DEFAULT: true},
	AIRSUPPORT_RELOAD	: {KEY: 'ttTeamPanelAirSupportReloadVisible',	DEFAULT: true},
	#Speed
	SPEED_SURFACE		: {KEY: 'ttTeamPanelSpeedSurfaceVisible',		DEFAULT: true},
	SPEED_UNDERWATER	: {KEY: 'ttTeamPanelSpeedUnderwaterVisible',	DEFAULT: true},
	#Visibility
	VISIBILITY_SURFACE	: {KEY: 'ttTeamPanelVisibilitySurfaceVisible',	DEFAULT: true},
	VISIBILITY_AIR		: {KEY: 'ttTeamPanelVisibilityAirVisible',		DEFAULT: true},
	#Surface Consumable
	RADAR_RANGE			: {KEY: 'ttTeamPanelRadarRangeVisible',			DEFAULT: true},
	HYDRO_RANGE			: {KEY: 'ttTeamPanelHydroRangeVisible',			DEFAULT: true},
	#Sub Consumable
	SUB_RADAR_RANGE		: {KEY: 'ttTeamPanelSubRadarRangeVisible',		DEFAULT: true},
	SUB_HYDRO_RANGE		: {KEY: 'ttTeamPanelSubHydroRangeVisible',		DEFAULT: true},
})

(def constant TP_SHIP_ICON_COLOR_PRESET [
	#Use -(234-0x??)
	#None
	{
		Auxiliary:	{},
		AirCarrier:	{},
		Battleship:	{},
		Cruiser:	{},
		Destroyer: 	{},
		Submarine:	{},
	},
	#Aslain v1
	{
		Auxiliary:	{redOffset: -184, greenOffset: -134, blueOffset: -234, alphaOffset:    0},
		AirCarrier:	{redOffset: -106, greenOffset:  -64, blueOffset:   21, alphaOffset:    0},
		Battleship:	{redOffset:   21, greenOffset: -106, blueOffset: -106, alphaOffset:    0},
		Cruiser:	{redOffset:	  21, greenOffset: 	  0, blueOffset: -106, alphaOffset:    0},
		Destroyer: 	{redOffset:	 -64, greenOffset: 	 21, blueOffset: -106, alphaOffset:    0},
		Submarine:	{redOffset: -207, greenOffset:    4, blueOffset:   11, alphaOffset:    0},
	},
	#Aslain v2
	{
		Auxiliary:	{redOffset: -184, greenOffset: -134, blueOffset: -234, alphaOffset:    0},
		AirCarrier:	{redOffset:  -43, greenOffset: -106, blueOffset:   21, alphaOffset:    0},
		Battleship:	{redOffset:   21, greenOffset: -106, blueOffset: -106, alphaOffset:    0},
		Cruiser:	{redOffset:	  21, greenOffset: 	  0, blueOffset: -106, alphaOffset:    0},
		Destroyer: 	{redOffset:	 -64, greenOffset: 	 21, blueOffset: -106, alphaOffset:    0},
		Submarine:	{redOffset: -106, greenOffset:  -64, blueOffset:   21, alphaOffset:    0},
	},
	#AutoSpy
	{
		Auxiliary:	{redOffset: -184, greenOffset: -134, blueOffset: -234, alphaOffset: -128},
		AirCarrier:	{redOffset: -134, greenOffset: -134, blueOffset: -134, alphaOffset: -128},
		Battleship:	{redOffset: -234, greenOffset: -184, blueOffset: -154, alphaOffset: -128},
		Cruiser:	{redOffset: -89,  greenOffset: -159, blueOffset: -234, alphaOffset: -128},
		Destroyer: 	{redOffset: -184, greenOffset: -134, blueOffset: -184, alphaOffset: -128},
		Submarine:	{redOffset: -224, greenOffset: -224, blueOffset: -224, alphaOffset: -128},
	},
	#Roslich
	{
		Auxiliary:	{redOffset:   21, greenOffset: -234, blueOffset:   21, alphaOffset:    0},
		AirCarrier:	{redOffset:   21, greenOffset:   21, blueOffset: -234, alphaOffset:    0},
		Battleship:	{redOffset:   21, greenOffset: -234, blueOffset: -234, alphaOffset:    0},
		Cruiser:	{redOffset: -234, greenOffset: -234, blueOffset:   21, alphaOffset:    0},
		Destroyer: 	{redOffset: -234, greenOffset:    0, blueOffset: -234, alphaOffset:    0},
		Submarine:	{redOffset: -234, greenOffset:   21, blueOffset:   21, alphaOffset:    0},
	},
	#DeCease
	{
		Auxiliary:	{redOffset:   11, greenOffset: -235, blueOffset:   40, alphaOffset:    0},
		AirCarrier:	{redOffset:   -9, greenOffset:  -60, blueOffset: -119, alphaOffset:    0},
		Battleship:	{redOffset:  -65, greenOffset:  -74, blueOffset:   40, alphaOffset:    0},
		Cruiser:	{redOffset:   20, greenOffset:  -76, blueOffset: -128, alphaOffset:    0},
		Destroyer: 	{redOffset: -137, greenOffset:   11, blueOffset: -124, alphaOffset:    0},
		Submarine:	{redOffset: -255, greenOffset: -255, blueOffset: -255, alphaOffset:    0},
	},
	#Hakabase
	{
		Auxiliary:	{redOffset: -184, greenOffset: -134, blueOffset: -234, alphaOffset:  -70},
		AirCarrier:	{redOffset: -226, greenOffset:   -7, blueOffset:   21, alphaOffset:  -70},
		Battleship:	{redOffset:   21, greenOffset: -234, blueOffset: -234, alphaOffset:  -70},
		Cruiser:	{redOffset:	  21, greenOffset: 	 21, blueOffset: -234, alphaOffset:  -70},
		Destroyer: 	{redOffset:	-234, greenOffset: 	 21, blueOffset: -234, alphaOffset:  -70},
		Submarine:	{redOffset:   21, greenOffset: -234, blueOffset:  -81, alphaOffset:  -70},
	},
])
(def constant TP_CONCEALMENT_SKILL_ID {
	'AirCarrier': 45,
	#'Auxiliary': null,
	'Battleship': 12,
	'Cruiser': 12,
	'Destroyer': 12,
	#'Submarine': null
})
(def constant TP_CONCEALMENT_CREW_ID "-1") #Works until WG introduces the EPIC CONCEALMENT SKILL (hope that never happens)
(def constant TP_ATBA_SKILL_ID {
	'AirCarrier': 41,
	#'Auxiliary': null,
	'Battleship': 40,
	'Cruiser': 30,
	#'Destroyer': null,
	#'Submarine': null
})
(def constant TP_ATBA_CREW_ID "-1") #Works until WG introduces the EPIC ATBA SKILL (hope that never happens)

(def css $TP_ShipConfigText()
	(extends $TextDefault13NM)
	(extends $FontEnableReadability)
)
(def css $TP_ShipConfigTextBold()
	(extends $TextDefaultBold13NM)
	(extends $FontEnableReadability)
)

#--------------------------------------------------------------------------------
#Main Elements
#--------------------------------------------------------------------------------
(def element TTaroTeamPanels () layout=true
	(scope
		(macro STAGE_SIZE)
		(macro TP_GET_USERPREFS)
		(macro TP_GET_PREF_NUMBER _varName="'posY'" _pref="TP_PREFS.POS_OFFSET")
	)
	(bindcall externalCall 'inputMapping.onAction' "['createParamsForAllShipsInBattle', {}]" on='addedToStage')
	#Hide the default Ub1 ears
	(bindcall externalCall 'direct.action' "['option.set', ['battle.ears.enabled', false]]" init=false watch=false on='addedToStage')

	(style
		(bind width "stageWidth")
		(bind height "stageHeight")
	)

	(block
		(style
			(position = "absolute")
			(bind top "posY")
			(width = 100%)
		)
		(element TP_TeamPanelLeft _userPrefsNum="_userPrefsNum")
		(element TP_TeamPanelRight _userPrefsNum="_userPrefsNum")
	)
)

#Ally
(def element TP_TeamPanelLeft (_userPrefsNum:gfx=null)
	(scope
		(var avatarCollection:gfx = "$datahub.getCollection(CC.avatar)")
		(var allyCollection:gfx = "avatarCollection ? avatarCollection.getChildByPath('team.ally.sortedAlive') : null" (event "avatarCollection.evChildAdded") (event "avatarCollection.evChildRemoved"))
		(var allyItems:array = "allyCollection ? allyCollection.items : null" (event "allyCollection.evAdded") (event "allyCollection.evRemoved")  (event "allyCollection.evUpdated"))
		(var isEnabled:bool = "allyItems && allyItems.length > 0")
		(macro TP_GET_PREF_NUMBER _varName="'sizeScale'" _pref="TP_PREFS.SCALE_OFFSET")
	)

	(style
		(position = "absolute")
		(left = 0)
	)
	(macro BIND_FAIR_SCALE "sizeScale")

	(bind visible "isEnabled")

	(element TP_HeaderItem _isAlly="true" _userPrefsNum="_userPrefsNum")

	(controller $Repeat renderer='TP_PlayerItem'
		(bind count "allyCollection ? allyCollection.items.length : 0")
		(args "allyItems" _isAlly="true" _userPrefsNum="_userPrefsNum")

		(bindcall removeChildAt "$event[1]" (event "allyCollection.evRemoved"))
		(bindcall addChildAt "$event[1]" (event "allyCollection.evAdded"))
	)
)

#Enemy
(def element TP_TeamPanelRight (_userPrefsNum:gfx=null)
	(scope
		(var avatarCollection:gfx = "$datahub.getCollection(CC.avatar)")
		(var enemyCollection:gfx = "avatarCollection ? avatarCollection.getChildByPath('team.enemy.sortedAlive') : null" (event "avatarCollection.evChildAdded") (event "avatarCollection.evChildRemoved"))
		(var enemyItems:array = "enemyCollection ? enemyCollection.items : null" (event "enemyCollection.evAdded") (event "enemyCollection.evRemoved") (event "enemyCollection.evUpdated"))
		(var isEnabled:bool = "enemyItems && enemyItems.length > 0")
		(macro TP_GET_PREF_NUMBER _varName="'sizeScale'" _pref="TP_PREFS.SCALE_OFFSET")
	)

	(style
		(position = "absolute")
		(right = 0)
		(align="right")
		(pivotX = 100%)
	)
	(macro BIND_FAIR_SCALE "sizeScale")

	(bind visible "isEnabled")

	(element TP_HeaderItem _isAlly="false" _userPrefsNum="_userPrefsNum")

	(controller $Repeat renderer='TP_PlayerItem'
		(bind count "enemyCollection ? enemyCollection.items.length : 0")
		(args "enemyItems" _isAlly="false" _userPrefsNum="_userPrefsNum")

		(bindcall removeChildAt "$event[1]" (event "enemyCollection.evRemoved"))
		(bindcall addChildAt "$event[1]" (event "enemyCollection.evAdded"))
	)
)

#Header for ship configs
(def element TP_HeaderItem (_isAlly:bool=false, _userPrefsNum:gfx=null)
	(scope
		# To suppress error
		(var _entity:gfx = "null")

		#Artillery
		(macro TP_GET_PREF_BOOL _varName="'isArtilleryRangeVisible'" _pref="TP_PREFS.ARTILLERY_RANGE")
		(macro TP_GET_PREF_BOOL _varName="'isArtilleryReloadVisible'" _pref="TP_PREFS.ARTILLERY_RELOAD")
		(var isArtilleryEnabled:bool = "isArtilleryRangeVisible || isArtilleryReloadVisible")
		#ATBA
		(macro TP_GET_PREF_BOOL _varName="'isAtbaRangeVisible'" _pref="TP_PREFS.ATBA_RANGE")
		(var isAtbaEnabled:bool = "isAtbaRangeVisible")
		#Torpedo
		(macro TP_GET_PREF_BOOL _varName="'isTorpedoRangeVisible'" _pref="TP_PREFS.TORPEDO_RANGE")
		(var isTorpedoEnabled:bool = "isTorpedoRangeVisible")
		#AntiAir
		(macro TP_GET_PREF_BOOL _varName="'isAntiAirRangeVisible'" _pref="TP_PREFS.ANTIAIR_RANGE")
		(macro TP_GET_PREF_BOOL _varName="'isAntiAirRatingVisible'" _pref="TP_PREFS.ANTIAIR_RATE")
		(var isAntiAirEnabled:bool = "isAntiAirRangeVisible || isAntiAirRatingVisible")
		#AirSupport
		(macro TP_GET_PREF_BOOL _varName="'isAirSupportRangeVisible'" _pref="TP_PREFS.AIRSUPPORT_RANGE")
		(macro TP_GET_PREF_BOOL _varName="'isAirSupportReloadVisible'" _pref="TP_PREFS.AIRSUPPORT_RELOAD")
		(var isAirSupportEnabled:bool = "isAirSupportRangeVisible || isAirSupportReloadVisible")
		#Mobility
		(macro TP_GET_PREF_BOOL _varName="'isSurfaceMobilityVisible'" _pref="TP_PREFS.SPEED_SURFACE")
		(macro TP_GET_PREF_BOOL _varName="'isUnderwaterMobilityVisible'" _pref="TP_PREFS.SPEED_UNDERWATER")
		(var isMobilityEnabled:bool = "isSurfaceMobilityVisible || isUnderwaterMobilityVisible")
		#Visibility
		(macro TP_GET_PREF_BOOL _varName="'isVisibilityByShipVisible'" _pref="TP_PREFS.VISIBILITY_SURFACE")
		(macro TP_GET_PREF_BOOL _varName="'isVisibilityByPlaneVisible'" _pref="TP_PREFS.VISIBILITY_AIR")
		(var isVisibilityEnabled:bool = "isVisibilityByShipVisible || isVisibilityByPlaneVisible")
		#Surface Consumable
		(macro TP_GET_PREF_BOOL _varName="'isRadarRangeVisible'" _pref="TP_PREFS.RADAR_RANGE")
		(macro TP_GET_PREF_BOOL _varName="'isHydroRangeVisible'" _pref="TP_PREFS.HYDRO_RANGE")
		(var isSurfaceConsumableEnabled:bool = "isRadarRangeVisible || isHydroRangeVisible")
		#Sub Consumables
		(macro TP_GET_PREF_BOOL _varName="'isSubRadarRangeVisible'" _pref="TP_PREFS.SUB_RADAR_RANGE")
		(macro TP_GET_PREF_BOOL _varName="'isSubHydroRangeVisible'" _pref="TP_PREFS.SUB_HYDRO_RANGE")
		(var isSubmarineConsumableEnabled:bool = "isSubRadarRangeVisible || isSubHydroRangeVisible")
		#ALT
		(macro TP_GET_PREF_BOOL _varName="'isVisibleOnlyAlt'" _pref="TP_PREFS.STATS_ALT_VISIBLE")
		(var camera:gfx = "$datahub.getSingleComponent(CC.camera)")
		(var altVision:bool = "camera ? camera.altVision : false" (event "camera.evAltVisionChanged"))
	)
	(style
		(hitTest = true)
	)
	(bind visible "isVisibleOnlyAlt ? altVision : true")

	(hblock
		(style
			(align = "center|middle")
			(height = 0)
			(marginTop = "-13")
			(bind flow "_isAlly ? Flow.HORIZONTAL : Flow.REVERSE_HORIZONTAL")
		)
		#For margin
		(element TP_PlayerDivisionItem 		_entity="_entity" _isAlly="_isAlly" _userPrefsNum="_userPrefsNum")
		(element TP_PlayerInfoItem 			_entity="_entity" _isAlly="_isAlly" _userPrefsNum="_userPrefsNum")
		(element TP_PlayerClanIconItem 		_entity="_entity" _isAlly="_isAlly" _userPrefsNum="_userPrefsNum")
		(element TP_ShipWeightItem 			_entity="_entity" _isAlly="_isAlly" _userPrefsNum="_userPrefsNum") #For tournament
		(element TP_ShipNationItem 			_entity="_entity" _isAlly="_isAlly" _userPrefsNum="_userPrefsNum")
		(element TP_ShipTierItem 			_entity="_entity" _isAlly="_isAlly" _userPrefsNum="_userPrefsNum")
		(element TP_ShipIconItem 			_entity="_entity" _isAlly="_isAlly" _userPrefsNum="_userPrefsNum")
		(element TP_ShipDetectionItem		_entity="_entity" _isAlly="_isAlly" _userPrefsNum="_userPrefsNum")
		(element TP_PlayerKillCountItem 	_entity="_entity" _isAlly="_isAlly" _userPrefsNum="_userPrefsNum")
		#

		#TODO
		#I really should move all these strings to constant
		#Maybe repace with repeat as well
		#

		#Visibility
		(element TP_ShipConfigImageItem "'url:../crew_commander/skills/detection_visibility_range.png'" _isVisible="isVisibilityEnabled" _tooltipTitle='IDS_SHIP_PARAM_DETECTION' _tooltipTexts=['IDS_SHIP_PARAM_VISIBILITY_DIST_BY_SHIP','IDS_SHIP_PARAM_VISIBILITY_DIST_BY_PLANE'] _userPrefsNum="_userPrefsNum")
		#Speed
		(element TP_ShipConfigImageItem "'url:../modules/icon_module_Engine_researched.png'" _isVisible="isMobilityEnabled" _tooltipTitle='IDS_SHIP_PARAM_MAXSPEED' _tooltipTexts=['IDS_SHIP_PARAM_MOBILITY','IDS_SHIP_PARAM_UNDERWATER_MOBILITY'] _userPrefsNum="_userPrefsNum")
		#AirStrike
		(element TP_ShipConfigImageItem "'url:../battle_hud/icon_frag/icon_frag_bomb.png'" _isVisible="isAirSupportEnabled" _alpha="0.7" _tooltipTitle='IDS_SHIP_PARAM_AIR_SUPPORT' _tooltipTexts=['IDS_SHIP_PARAM_MAX_DIST','IDS_SHIP_PARAM_SHOT_DELAY'] _userPrefsNum="_userPrefsNum")
		#AA
		(element TP_ShipConfigImageItem "'url:../battle_hud/lower_log_modifiers/AAAuraDamage.png'" _isVisible="isAntiAirEnabled" _alpha="0.7" _tooltipTitle='IDS_SHIP_PARAM_AIR_DEFENSE' _tooltipTexts=['IDS_SHIP_PARAM_MAX_DIST','IDS_SHIP_PARAM_AIR_DEFENSE'] _userPrefsNum="_userPrefsNum")
		#ATBA
		(element TP_ShipConfigImageItem "'url:../battle_hud/icon_frag/icon_frag_atba.png'" _isVisible="isAtbaEnabled" _tooltipTitle='IDS_SHIP_PARAM_ATBA' _tooltipTexts=['IDS_SHIP_PARAM_MAX_DIST'] _userPrefsNum="_userPrefsNum")
		#Artillery
		(element TP_ShipConfigImageItem "'url:../modules/icon_module_Artillery_researched.png'" _isVisible="isArtilleryEnabled" _tooltipTitle='IDS_SHIP_PARAM_MAIN_GUN' _tooltipTexts=['IDS_SHIP_PARAM_MAX_DIST','IDS_SHIP_PARAM_SHOT_DELAY'] _userPrefsNum="_userPrefsNum")
		#Torpedo
		(element TP_ShipConfigImageItem "'url:../modules/icon_module_Torpedoes_researched.png'" _isVisible="isTorpedoEnabled" _alpha="0.8" _tooltipTitle='IDS_SHIP_PARAM_TORPEDOES' _tooltipTexts=['IDS_SHIP_PARAM_MAX_DIST'] _userPrefsNum="_userPrefsNum")
		
		#(element TP_ShipConfigImageItem "'url:../battle_hud/crosshair/indicators/crosshair_indicator_energy_white.png'") #TODO FIX
		#Hydro/Radar
		(element TP_ShipConfigImageItem "'url:../battle_hud/icon_frag/icon_frag_wave.png'" _isVisible="isSurfaceConsumableEnabled" _alpha="0.7" _tooltipTitle='IDS_TITLE_CONSUMABLES' _tooltipTexts=['IDS_DOCK_CONSUME_TITLE_PCY008_SONARSEARCH','IDS_DOCK_CONSUME_TITLE_PCY019_RLSSEARCH'] _userPrefsNum="_userPrefsNum")
		#Hydrophone/SubRadar
		(element TP_ShipConfigImageItem "'url:../battle_hud/icon_frag/icon_frag_wave.png'" _isVisible="isSubmarineConsumableEnabled" _alpha="0.7" _tooltipTitle='IDS_TITLE_CONSUMABLES' _tooltipTexts=['IDS_DOCK_CONSUME_TITLE_PCY045_HYDROPHONE','IDS_DOCK_CONSUME_TITLE_PCY048_SUBMARINELOCATOR'] _userPrefsNum="_userPrefsNum")
	)
)

#Player
(def element TP_PlayerItem (_items:array, _isAlly:bool=false, _userPrefsNum:gfx=null)
	(scope
		(var _entity:gfx = "_items[$index]" watch=false)
		(var _index:number = "indexOf(_entity, _items)")
		(var healthComponent:gfx = "_entity.hasComponent(CC.health) ? _entity.health : null")
		(var isAlive:bool = "healthComponent ? healthComponent.isAlive : false" (event "healthComponent.evIsAliveChanged"))
		#For tooltip
		(event evHideInfotip)
		(event evMenuItemClicked) #maybe unnecessary?
		(var selfPlayer:gfx = "$datahub.getSingleEntity(CC.playerAvatar)")
		(var isSelf:bool = "selfPlayer.id == _entity.id")
		(var isBot:bool = "_entity && _entity.avatar.isBot")
		(var isContextMenuAvailable:bool = "!(isSelf || isBot)")
		(var mouse:gfx = "$datahub.getSingleComponent(CC.mouse)")
		(var isMouseActive:bool = "mouse.active" (event "mouse.evActiveChanged"))

		(macro TP_GET_PREF_BOOL _varName="'isDeadPlayerVisible'" _pref="TP_PREFS.DEAD_PLAYER_VISIBLE")
		(var battleDataEntity:gfx = "$datahub.getSingleEntity(CC.battleData)")
		(var gameModeId:number = "battleDataEntity.battleInfo.gameModeId")
		(var isScenarioMode:bool = "SC.Battle.GAME_MODE.PVE == gameModeId")
		(var isScenarioBot:bool = "isBot && isScenarioMode")
		(var isVisible:bool = "(isDeadPlayerVisible && !(isBot && isScenarioMode)) ? true : isAlive")

		(macro TP_GET_PREF_NUMBER _varName="'blurAlpha'" _pref="TP_PREFS.BLUR_ALPHA")
		(macro TP_GET_PREF_BOOL _varName="'isBlurMode'" _pref="TP_PREFS.BLUR_MODE")
		(macro TP_GET_PREF_BOOL _varName="'isBlurVisibleOnlyAlt'" _pref="TP_PREFS.BLUR_ALT_VISIBLE")
		(var camera:gfx = "$datahub.getSingleComponent(CC.camera)")
		(var altVision:bool = "camera ? camera.altVision : false" (event "camera.evAltVisionChanged"))
		(var isBlurVisible:bool = "isBlurVisibleOnlyAlt ? altVision : true")
	)
	#For tooltip
	(dispatch evHideInfotip args="{}" (bind trigger "isMouseActive") (event "evMenuItemClicked"))

	(style
		(backgroundColor = 0x00FFFFFF) #For seamless hittest. Do not use 0x01000000 because it will have a visible dark color!

		#(position = "absolute") is required to separate the argument entity and the position of this element within parent layout.
		#With auto positioning, the layout of elements remains the same - but the argument entities change.
		#In that case, the spotted indicator or any element that uses (watch=false) variable within their scope can break.
		(position = "absolute")
		(bind left "_isAlly ? 0 : auto")
		(bind right "_isAlly ? auto : 0")
		(bind top "_index == 0 ? 0 : (_index * (TP_PLAYER_ROW_SIZE.HEIGHT + 2)) + 2")
	)

	(bind visible "isVisible")

	(element TP_ContrastPanel _isBlur="isBlurMode" _intensity="blurAlpha"
		(bind visible "isBlurVisible")
	)

	(element HorizontalDividerTwoPx
		(bind visible "_index == 0")
		(style
			(alpha = 2.0)
		)
	)
	#Ally: hblock, Enemy: reverse hblock
	(block
		(style
			(height = "TP_PLAYER_ROW_SIZE.HEIGHT")
		)

		(element TP_ShipHealthBarItem _entity="_entity" _isAlly="_isAlly" _userPrefsNum="_userPrefsNum")
		(hblock
			(style
				(align = "center|middle")
				(bind alpha "isAlive ? 1.0 : 0.4")
				(bind flow "_isAlly ? Flow.HORIZONTAL : Flow.REVERSE_HORIZONTAL")
			)
			(element TP_PlayerDivisionItem 		_entity="_entity" _isAlly="_isAlly" _userPrefsNum="_userPrefsNum")
			(element TP_PlayerInfoItem 			_entity="_entity" _isAlly="_isAlly" _userPrefsNum="_userPrefsNum")
			(element TP_PlayerClanIconItem 		_entity="_entity" _isAlly="_isAlly" _userPrefsNum="_userPrefsNum")
			(element TP_ShipWeightItem 			_entity="_entity" _isAlly="_isAlly" _userPrefsNum="_userPrefsNum") #For tournament
			(element TP_ShipNationItem 			_entity="_entity" _isAlly="_isAlly" _userPrefsNum="_userPrefsNum")
			(element TP_ShipTierItem 			_entity="_entity" _isAlly="_isAlly" _userPrefsNum="_userPrefsNum")
			(element TP_ShipIconItem 			_entity="_entity" _isAlly="_isAlly" _userPrefsNum="_userPrefsNum")
			(element TP_ShipDetectionItem		_entity="_entity" _isAlly="_isAlly" _userPrefsNum="_userPrefsNum")
			(element TP_PlayerKillCountItem 	_entity="_entity" _isAlly="_isAlly" _userPrefsNum="_userPrefsNum")
			(element TP_ShipConfigurationsItem 	_entity="_entity" _isAlly="_isAlly" _userPrefsNum="_userPrefsNum")
			(element TP_ShipConsumablesItem		_entity="_entity" _isAlly="_isAlly" _userPrefsNum="_userPrefsNum")
		)
	)
	
	#Tooltip for Detailed Ship Stats
	(controller $Tooltip
		(renderer = 'TP_TooltipShipConfigurationsItem')
		(args "_entity")
		(macro TP_TOOLTIP_BEHAVIOUR "_isAlly")
	)

	#Context Menu for Report/Compliment/Division
	(controller $Tooltip (renderer = 'ContextMenuPlayer')
		(bind enabled "isContextMenuAvailable")
		(args _playerEntity="_entity" _selfPlayer="selfPlayer")
		(macro DEFAULT_MENU_BEHAVIOUR "evHideInfotip" "1")
		(cache=false)
	)

	(element HorizontalDividerTwoPx
		(style
			(alpha = 2.0)
		)
	)
)

#Player Info
(def element TP_PlayerInfoItem (_entity:gfx=null, _isAlly:bool=false, _userPrefsNum:gfx=null)
	(scope
		#bar width
		(macro TP_GET_PREF_NUMBER _varName="'widthScale'" _pref="TP_PREFS.HEALTHBAR_WIDTH")
		(var widthSize:number = "TP_PLAYER_ROW_SIZE.WIDTH * widthScale - TP_DIVISION_ELEMENT_WIDTH") # - (division item width - 5). Canbe replaced with margin though
	)
	
	(style
		(align = "center|middle")
		(bind marginRight "_isAlly ? 5px : auto")
		(bind marginLeft "_isAlly ? auto : 5px")
		
		(bind width "widthSize")
		(height = "TP_PLAYER_ROW_SIZE.HEIGHT")
	)

	(vtile
		(style
			(width = 100%)
			(vgap = 2px)
		)
		(element TP_PlayerNameWithTagItem 	"_entity" _isAlly="_isAlly" _userPrefsNum="_userPrefsNum")
		(element TP_ShipNameItem 			"_entity" _isAlly="_isAlly" _userPrefsNum="_userPrefsNum")
	)
)

(def element TP_PlayerDivisionItem (_entity:gfx=null, _isAlly:bool=false, _userPrefsNum:gfx=null)
	(scope
		(var divisionMemberComponent:gfx = "_entity && _entity.hasComponent(CC.divisionMember) ? _entity.divisionMember : null")
		(var divisionSign:number = "divisionMemberComponent ? divisionMemberComponent.divisionSign : null" (event "divisionMemberComponent.evDivisionChanged"))
		(var isInSameDivision:bool = "divisionMemberComponent ? divisionMemberComponent.isInSameDivision : false" (event "divisionMemberComponent.evDivisionChanged"))
		(var division:number = "divisionMemberComponent ? divisionMemberComponent.division : 0" (event "divisionMemberComponent.evDivisionChanged"))
		(var isInDivision:bool = "division > 0")
		(var isDivisionHidden:bool = "divisionMemberComponent ? divisionMemberComponent.divisionHidden : false" (event "divisionMemberComponent.evDivisionHiddenChanged"))
		(var divisionIconIndex:number = "isInSameDivision ? (divisionSign + 1) : (divisionSign + 1 + 10)")
	)
	(style
		(width = "TP_DIVISION_ELEMENT_WIDTH")
		(align = "middle|center")
	)
	(mc division_item
		(bind visible "isInDivision && !isDivisionHidden")
		(bindcall gotoAndStop "divisionIconIndex" init=true)
	)
)

(def element TP_PlayerClanIconItem (_entity:gfx=null, _isAlly:bool=false, _userPrefsNum:gfx=null)
	(scope
		(var clanComponent:gfx = "_entity && _entity.hasComponent(CC.clanman) ? _entity.clanman : null")
		(var clanId:number = "clanComponent ? clanComponent.clanId : null" (event "clanComponent.evClanIdChanged"))
		(var clanEntity:gfx = "$datahub.getPrimaryEntity(CC.clan, clanId)")
		(var clanName:str = "clanEntity ? clanEntity.clan.tag : null" (event "clanEntity.clan.evTagChanged"))
		(var clanIcon:str = "'url:../clan_icons/' + clanName + '.png'")
		(macro TP_GET_PREF_BOOL _varName="'isClanIconVisible'" _pref="TP_PREFS.CLAN_ICON")
	)
	(style
		(align = "middle|center")
	)
	(bind visible "isClanIconVisible")
	(block
		(style
			(bind backgroundImage "clanIcon")
			(width = 24)
			(height = 24)
			#(backgroundSize = "fill")
		)
	)
)

(def element TP_PlayerNameWithTagItem (_entity:gfx=null, _isAlly:bool=false, _userPrefsNum:gfx=null)
	(scope
		(macro TP_GET_PREF_BOOL _varName="'isClanNameVisible'" _pref="TP_PREFS.CLAN_NAME")
		(var isInClan:bool = "_entity ? _entity.hasComponent(CC.clanman) : false")
		(var clanComponent:gfx = "isInClan ? _entity.clanman : null")
		(var clanId:number = "clanComponent ? clanComponent.clanId : null" (event "clanComponent.evClanIdChanged"))
		(var clanEntity:gfx = "$datahub.getPrimaryEntity(CC.clan, clanId)")
		(var clanName:str = "clanEntity ? clanEntity.clan.tag : null" (event "clanEntity.clan.evTagChanged"))
		(var clanNameWithBrackets:str = "isInClan && isClanNameVisible ? '[' + clanName + ']' : ''")

		(macro TP_GET_PREF_BOOL _varName="'isPlayerNameVisible'" _pref="TP_PREFS.PLAYER_NAME")
		(var pureName:str = "(isPlayerNameVisible && _entity) ? _entity.avatar.pureName : ' '")

		(macro TP_GET_MARKER_DATA "_entity")
	)
	
	(style
		(width = 100%)
		(bind align "_isAlly ? left|middle : right|middle")
	)

	(bind visible "isClanNameVisible || isPlayerNameVisible")

	(tf
		(class $TextDefault13NM)
		(class $FontEnableReadability)
		(bind class "isGolden ? '$FontColorGolden' : '$None'")
		(alpha = 0.95)
		(style
			(width = "100%")
			(elideMode = true)
			(bind textAlign "_isAlly ? left : right")
		)
		(bind text "clanNameWithBrackets + pureName")
	)
)

(def element TP_PlayerKillCountItem (_entity:gfx=null, _isAlly:bool=false, _userPrefsNum:gfx=null)
	(scope
		(var killCount:number = "_entity ? _entity.avatar.frags : 0" (event "_entity.avatar.evFragsChanged"))
		(macro TP_GET_PREF_BOOL _varName="'isPlayerKillCountVisible'" _pref="TP_PREFS.KILL_COUNT")
	)
	(style
		(width = 18px)
		(align = "middle|center")
	)
	(bind visible "isPlayerKillCountVisible")
	(tf
		(class $TextDefaultBoldNM)
		(class $FontEnableReadability)
		(bind text "killCount ? killCount : ''")
	)
)

#Ship Info
(def element TP_ShipIconItem(_entity:gfx=null, _isAlly:bool=false, _userPrefsNum:gfx=null)
	(scope
		(macro TP_GET_MARKER_DATA "_entity")
		(var markerColorName:str = 
			"	!isAlive			? 'sunk' :
				isGolden			? 'division' :
				tkStatus			? 'teamkiller' :
				'white'
			"
		)

		(var iconName:str = "'icon_' + markerColorName + '_' + shipType")

		(macro TP_GET_PREF_BOOL _varName="'isShipIconVisible'" _pref="TP_PREFS.SHIP_ICON")
		(macro TP_GET_PREF_NUMBER _varName="'shipIconColorIndex'" _pref="TP_PREFS.SHIP_ICON_COLOR")
		(var isColorAvailable:bool = "!(isGolden || tkStatus)")
		(var colorPreset:dict = "(TP_SHIP_ICON_COLOR_PRESET.length > shipIconColorIndex) ? TP_SHIP_ICON_COLOR_PRESET[shipIconColorIndex] : null")
		(var colorDict:dict = "(isColorAvailable && colorPreset) ? colorPreset[subType] : {}")
	)

	(style
		(width = "SHIP_ICON_SIZE.WIDTH")
		(height = "SHIP_ICON_SIZE.HEIGHT")
		(bind scaleX "_isAlly ? 1.0 : -1.0")
		(pivotX = "SHIP_ICON_SIZE.WIDTH/2")
	)
	(bind visible "isShipIconVisible")

	(block
		(style
			(bind backgroundImage "'url:../battle_hud/markers/ship/' + iconName + '.png'")
		)
	)
	(block
		(bind colorTransform "colorDict")
		(style
			(bind backgroundImage "'url:../battle_hud/markers/ship/' + iconName + '.png'")
		)
	)
)

(def element TP_ShipNameItem(_entity:gfx=null, _isAlly:bool=false, _userPrefsNum:gfx=null)
	(scope
		(var shipEntity:gfx = "_entity ? _entity.avatar.ship.ref.ship : null" (event "_entity.avatar.evShipRefChanged"))
		(var shipName:str = "shipEntity ? tr(shipEntity.nameIDS) : ''") #IDS_PASB518
		(macro TP_GET_ISAFK)
		(macro TP_GET_PREF_BOOL _varName="'isShipNameVisible'" _pref="TP_PREFS.SHIP_NAME")
	)

	(bind visible "isShipNameVisible")

	(style
		(bind align "_isAlly ? left|middle : right|middle")
		(width = 100%)
	)

	(tf
		(class $TextDefaultBoldNM)
		(bind class "isAFK ? '$FontColorUnready' : tkStatus ? '$FontColorTeamkiller' : '$None'")
		(style
			(width = 100%)
			(elideMode = true)
			(bind textAlign "_isAlly ? left : right")
		)
		(bind text "shipName")
	)
)

(def element TP_ShipNationItem(_entity:gfx=null, _isAlly:bool=false, _userPrefsNum:gfx=null)
	(scope
		(var shipEntity:gfx = "_entity ? _entity.avatar.ship.ref.ship : null" (event "_entity.avatar.evShipRefChanged"))
		(var flagName:str = "shipEntity ? shipEntity.flagName : ''") #IDS_PASB518
		(macro TP_GET_ISAFK)
		(macro TP_GET_PREF_BOOL _varName="'isShipNationVisible'" _pref="TP_PREFS.SHIP_NATION")
	)

	(style
		(width = "TP_PLAYER_ROW_SIZE.HEIGHT")
		(height = "TP_PLAYER_ROW_SIZE.HEIGHT")
		(marginLeft = 4px)
		(marginRight = 4px)
		(align = "middle|center")
		(backgroundSize = "fill")
		(bind backgroundImage "flagName ? 'url:../nation_flags/tiny/flag_' + flagName + '.png' : ''")
	)
	(bind visible "isShipNationVisible")
)

#For Tournamnet
(def element TP_ShipWeightItem(_entity:gfx=null, _isAlly:bool=false, _userPrefsNum:gfx=null)
	(scope
		(var shipEntity:gfx = "_entity ? _entity.avatar.ship.ref.ship : null" (event "_entity.avatar.evShipRefChanged"))
		(var shipId:str = "shipEntity ? toString(shipEntity.id) : ''") #uint long

		# Enabled
		(var shipWeights:dict = "MOD_TOURNAMENT_SHIPWEIGHT_DATA")
		(var isShipWeightEnabled:bool = "shipWeights")
		(var shipWeightData:dict = "isShipWeightEnabled && shipId in shipWeights ? shipWeights[shipId] : {}")

		# Weight
		(var weight:number = "'WEIGHT' in shipWeightData ? shipWeightData.WEIGHT : 0")
		(var weightText:str = "_entity ? weight : ''")
	)
	(style
		(width = 20px)
		(align = "center")
	)
	(bind visible "isShipWeightEnabled")
	(tf
		(class $TextDefaultBoldNM)
		(class $FontEnableReadability)
		(bind text "weightText")
	)
)
#

(def element TP_ShipTierItem(_entity:gfx=null, _isAlly:bool=false, _userPrefsNum:gfx=null)
	(scope
		(var shipEntity:gfx = "_entity ? _entity.avatar.ship.ref.ship : null" (event "_entity.avatar.evShipRefChanged"))
		(var levelRome:str = "shipEntity ? shipEntity.levelRome : ''") #IDS_PASB518
		(macro TP_GET_PREF_BOOL _varName="'isShipTierVisible'" _pref="TP_PREFS.SHIP_TIER")
		(macro TP_GET_PREF_BOOL _varName="'isPremiumHighlighted'" _pref="TP_PREFS.PREMIUM_TIER")

		(var isPremium:bool = "shipEntity ? shipEntity.isPremium : false") #IDS_PASB518
		(var fontColor:number = "isPremium && isPremiumHighlighted ? FONT_CLASS_TO_COLOR['$FontColorGolden'] : FONT_CLASS_TO_COLOR['$FontColorWhite']")
	)
	(style
		(width = 22px)
		(align = "center")
	)
	(bind visible "isShipTierVisible")
	(tf
		(class $TextDefaultBoldNM)
		(class $FontEnableReadability)
		(style
			(bind textColor "fontColor")
		)
		(bind text "levelRome")
	)
)

(def element TP_ShipDetectionItem(_entity:gfx=null, _isAlly:bool=false, _userPrefsNum:gfx=null)
	(scope
		# I should really rewrite this section because it's so dented

		(var _markerEntity:gfx = "_entity")

		#map visible		
		(macro GET_MARKER_ENTITY_COMPONENT 'visibility')
		(var mapVisible:bool = "visibilityComponent ? visibilityComponent.mapVisible : false" (event "visibilityComponent.evChanged"))

		#relation
		(var playerAvatar:gfx = "$datahub.getSingleEntity(CC.playerAvatar)")
		(var isObserver:bool = "!playerAvatar")
		(macro GET_MARKER_ENTITY_COMPONENT 'relation')
		(var isAlly:bool = "relationComponent && isIn(relationComponent.value, [SC.Battle.PLAYER_RELATION.ALLY, SC.Battle.PLAYER_RELATION.SELF])" (event "relationComponent.evChanged"))

		#visibility flag
		(macro GET_MARKER_ENTITY_COMPONENT 'vehicle')
		(var visibilityFlag:bool = "vehicleComponent ? vehicleComponent.visibilityFlags : false" (event "vehicleComponent.evVisibilityFlagsChanged"))

		#fix for hydrophone detection with no visual contact
		(var isMapVisibleEnabled:bool = "!(isAlly || isObserver)")
		(var hasMapPosition:bool = "_markerEntity ? _markerEntity.hasComponent(CC.mapPosition) : false" watch=false)
		(bind hasMapPosition "!hasMapPosition && $event.classID == CC.mapPosition ? true : false" watch=false init=false (event "_markerEntity.evAdded"))
		(event evMapPositionAdded)
		(dispatch evMapPositionAdded watch=false init=false (bind enabled "!hasMapPosition && isMapVisibleEnabled") (bind trigger "hasMapPosition"))

		(var isDetected:bool = "visibilityFlag || (isMapVisibleEnabled && mapVisible)")
		(var wasDetected:bool = "false" watch=false)

		(event evVisibilityChanged)
		(dispatch evVisibilityChanged args="{}" watch=false init=false (bind enabled "!(wasDetected) && isDetected") (bind trigger "isDetected"))
		(bind wasDetected "true" watch=false init=false (event "evMapPositionAdded")(event "evVisibilityChanged"))

		(macro GET_MARKER_ENTITY_COMPONENT 'health')
		(var isAlive:bool = "healthComponent ? healthComponent.isAlive : false" (event "healthComponent.evIsAliveChanged"))
		(macro TP_GET_PREF_BOOL _varName="'isShipDetectionVisible'" _pref="TP_PREFS.SHIP_DETECTION")
		(var iconColorTransform:dict = "isDetected  ? {redMultiplier:0,greenMultiplier:0,blueMultiplier:0,alphaMultiplier:1.0,redOffset:0xFF,greenOffset:0x99,blueOffset:0x33,alphaOffset:0 }
													: {redMultiplier:0,greenMultiplier:0,blueMultiplier:0,alphaMultiplier:0.6,redOffset:0xFF,greenOffset:0xFF,blueOffset:0xFF,alphaOffset:0 }")
	)
	(style
		(align = "center|middle")
		(bind alpha "_entity ? 1.0 : 0.0")
		(width = "14")
	)
	(bind visible "isShipDetectionVisible")
	(block
		(bind visible "isAlive && (isDetected || wasDetected)")
		(controller $Sector
			(bind color "0xFFFFFFFF")
			(bind arc "360")
			(bind radius "4")
		)
		(bind colorTransform "iconColorTransform")
	)
)

(def element TP_ShipHealthBarItem(_entity:gfx=null, _isAlly:bool=false, _userPrefsNum:gfx=null)
	(scope
		#entity
		(var _markerEntity:gfx = "_entity")

		#multi teams
		(var customElementsVisibilityComponent:gfx = "$datahub.getSingleEntity(CC.customElementsVisibility)")
		(var enabledElements:number = "customElementsVisibilityComponent ? customElementsVisibilityComponent.customElementsVisibility.enabledElements : null" (event "customElementsVisibilityComponent.customElementsVisibility.evChanged"))
		(var isMultyTeamEnabled:bool = "(enabledElements & SC.Battle.CUSTOM_BATTLE_ELEMENTS.MULTYTEAMS) > 0")

		#health
		(macro GET_MARKER_ENTITY_COMPONENT 'health')
		(var healthValue:number = "healthComponent ? healthComponent.value : 0" (event "healthComponent.evValueChanged"))
		(var healthMax:number = "healthComponent ? healthComponent.max : 0" (event "healthComponent.evMaxChanged"))
		(var healthRatio:number = "healthMax ? healthValue / healthMax : 1")
		(var isAlive:bool = "healthComponent ? healthComponent.isAlive : false" (event "healthComponent.evIsAliveChanged"))

		#regeneration
		(macro GET_MARKER_ENTITY_COMPONENT 'dataComponent')
		(var regenMaxValue:number = "dataComponentComponent ? dataComponentComponent.data.maxValue : 0" (event "dataComponentComponent.evDataChanged"))
		(var regenRatio:number = "healthMax ? regenMaxValue / healthMax : 0")

		#relation
		(macro GET_MARKER_ENTITY_COMPONENT 'avatar')
		(var teamId:number = "avatarComponent ? avatarComponent.teamId : 0" (event "avatarComponent.evTeamIdChanged"))
		(macro GET_MARKER_ENTITY_COMPONENT 'relation')
		(var relationValue:number = "relationComponent ? relationComponent.value : 0" (event "relationComponent.evChanged"))
		(var relationStr:str = "toLower(SC.Battle.PLAYER_RELATION.VALUE_TO_NAME[relationValue])")
		(var isAlly:bool = "relationComponent && isIn(relationComponent.value, [SC.Battle.PLAYER_RELATION.ALLY, SC.Battle.PLAYER_RELATION.SELF])" (event "relationComponent.evChanged"))

		#diplomacy
		(macro GET_MARKER_ENTITY_COMPONENT 'diplomacyRelation')
		(var diplomacyRelationValue:number = "diplomacyRelationComponent ? diplomacyRelationComponent.value : 0" (event "diplomacyRelationComponent.evChanged"))
		(var relationStrByDiplomacy:str = "DIPLOMACY_RELATION_TO_RELATION_STR[diplomacyRelationValue]")

		#flagship for tournament
		(var shipEntity:gfx = "avatarComponent ? avatarComponent.ship.ref.ship : null" (event "avatarComponent.evShipRefChanged"))
		(var shipId:str = "shipEntity ? toString(shipEntity.id) : ''")

		(var shipWeights:dict = "MOD_TOURNAMENT_SHIPWEIGHT_DATA")
		(var isShipWeightEnabled:bool = "shipWeights")
		(var shipWeightData:dict = "isShipWeightEnabled && shipId in shipWeights ? shipWeights[shipId] : {}")

		(var isFlagShip:bool = "'FLAGSHIP' in shipWeightData ? shipWeightData.FLAGSHIP : false")
		(var flagShipColorKey:str = "isAlly ? 'ally' : 'enemy'")

		#bar color
		(macro TP_GET_PREF_NUMBER _varName="'alphaScale'" _pref="TP_PREFS.HEALTHBAR_OPACITY")
		(var regenBarColorTransform:dict = "{redMultiplier:0,greenMultiplier:0,blueMultiplier:0,alphaMultiplier:1.0,redOffset:230,greenOffset:230,blueOffset:230,alphaOffset:0 }")
		(var markerColorTransform:dict = 
			"	isFlagShip					? TP_FLAGSHIP_COLOR_TRANSFORM[flagShipColorKey] :
				diplomacyRelationComponent	? TWO_TEAMS_COLOR_TRANSFORMS[relationStrByDiplomacy] :
				isAlly						? TWO_TEAMS_COLOR_TRANSFORMS['ally'] :
				isMultyTeamEnabled			? MULTI_TEAMS_COLOR_TRANSFORMS[teamId]
											: TWO_TEAMS_COLOR_TRANSFORMS[relationStr]"
		)

		#bar width
		(macro TP_GET_PREF_NUMBER _varName="'widthScale'" _pref="TP_PREFS.HEALTHBAR_WIDTH")

	)

	(style
		(position = "absolute")
		(bind scaleX "_isAlly ? 1.0 : -1.0")
		(bind left "_isAlly ? 0 : auto")
		(bind right "_isAlly ? auto : 0")
		(pivotX = "0")
		(pivotY = "0")
		(bind width "TP_PLAYER_ROW_SIZE.WIDTH * widthScale")
		(height = "TP_PLAYER_ROW_SIZE.HEIGHT")
		(align = "center|middle")
		(hitTest = false)
	)

	(block
		(style
			(width = "100%")
			(height = "100%")
			(align = "center|middle")
		)
		
		(block
			(class $FullsizeAbsolute)
			(style
				(backgroundImage = "'url:../battle_hud/markers/bar/bar_bg.png'")
				(backgroundSize = "fill")
				(scale9grid = [1, 1, 44, 2])
				(alpha = "0.8")
			)
		)

		(mc 'flash.display.Sprite'
			(class $FullsizeAbsolute)
			(element TP_HealthBarItem "regenBarColorTransform" "regenRatio")
			(element TP_HealthBarItem "markerColorTransform" "healthRatio")
			(blendMode = 'layer')
			(style
				(bind alpha "alphaScale")
				(bind scaleX "widthScale")
			)
			(bind visible "isAlive")
		)
	)
)

(def element TP_HealthBarItem(_colorTransform:dict, _scaleX:number)
	(block
		(class $FullsizeAbsolute)
		(macro DRAW_RECT "0" "0" "TP_PLAYER_ROW_SIZE.WIDTH" "TP_PLAYER_ROW_SIZE.HEIGHT")
		(bind colorTransform "_colorTransform")
		(bind scaleX "_scaleX")
	)
)

(def element TP_ContrastPanel(_isBlur:bool=false, _intensity:number="1.0")
	(scope
		(var panelElement:str = "_isBlur ? 'TP_ContrastPanelBlur' : 'TP_ContrastPanelNormal'")
	)
	(class $FullsizeAbsolute)
	(controller $Instance
		(bind renderer "panelElement")
		(args "_intensity")
	)
)

(def element TP_ContrastPanelNormal(_alpha:number=1.0)
	(class $FullsizeAbsolute)
	(mc hud_bar_bg_sliced
		(class $FullsizeAbsolute)
		(bind alpha "_alpha")
	)
)

(def element TP_ContrastPanelBlur(_blurIntensity:number=0.3)
	(class $FullsizeAbsolute)
	(element DeclareBlurLayer)
	(mc mc_blurmap_medium
		(class $FullsizeAbsolute)
		(rendererString = blurMeBaby)
		(macro TP_BIND_BLURINTENSITY "_blurIntensity")
	)
)

#Active Consumables Info: wip
(def element TP_ShipConsumablesItem(_entity:gfx=null, _isAlly:bool=false, _userPrefsNum:gfx=null)
	(scope
		(macro TP_GET_PREF_BOOL _varName="'isTeamConsumableVisible'" _pref="TP_PREFS.TEAM_CONSUMABLES")

		(var _markerEntity:gfx = "_entity")
		(macro GET_MARKER_ENTITY_COMPONENT 'data')
		(var consData:array = "dataComponent ? dataComponent.data['consMonitor']: []" (event "dataComponent.evChanged"))

		(macro GET_MARKER_ENTITY_COMPONENT 'health')
		(var isAlive:bool = "healthComponent ? healthComponent.isAlive : false" (event "healthComponent.evIsAliveChanged"))
	)
	(style
		(flow = "Flow.HORIZONTAL")
		(bind alpha "isAlive ? 1.0 : 0")
	)
	(bind visible "isTeamConsumableVisible")

	(controller $Repeat renderer='TP_TeamConsumableItem'
		(bind enabled "consData.length")
		(bind count "consData.length")
		(args "consData[$index]")
	)
)

(def element TP_TeamConsumableItem (_consData:dict=null)
	# Implicitly using Constants from Consumables Monitor
	(scope
		(event evPlayActivatedAnimation)
		(event evPlayAboutToEndAnimation)
		(event evPlayEndingAnimation)

		(var consIconPath:str = "_consData ? 'url:../consumables/consumable_' + _consData['icon'] + '.png' : ''")
		(var consNum:str = "_consData ? _consData['num'] : ''")
		(var consState:number = "_consData ? _consData['currentState'] : -1")
		(var consEndTime:number = "_consData ? _consData['endTime'] : 0")

		(var isSpecialConsumable:bool = "_consData ? _consData['icon'] in [
			'PCY057_TriggerHeal', 'PCY056_TacticalMinefield', 'PCY055_TriggerSabotage', 'PCY054_TacticalVulnerabilityDebuff',
			'PCY053_SmokePlane', 'PCY052_ReconSquad', 'PCY051_SpeedBuff'
			] : false"
		)
		
		(var isReady:bool = "consState == SC.Battle.CONSUMABLE_STATES.READY")
		(var isActive:bool = "consState == SC.Battle.CONSUMABLE_STATES.AT_WORK")
		(var isReload:bool = "consState == SC.Battle.CONSUMABLE_STATES.RELOAD")
		(var isEmpty:bool = "consState == SC.Battle.CONSUMABLE_STATES.NO_AMMO")
		(var isPreparation:bool = "consState == SC.Battle.CONSUMABLE_STATES.PREPARATION")
		
		#0: READY, 1: AT_WORK, 2: RELOAD, 3: NO_AMMO, 4:PREPARATION
		(var consStateColor:number = "CM2_STATE_COLORS[consState]")

		(var timerEntity:gfx = "$datahub.getSingleEntity(CC.timer)")
		(var consStateTime:number = "consEndTime - timerEntity.timer.currentTime" (event "timerEntity.timer.evFrequent"))

		(var cameraEntity:gfx = "$datahub.getSingleEntity(CC.camera)")
		(var isTactical:bool = "cameraEntity.camera.isTactical" (event "cameraEntity.camera.evTacticalStateChanged"))
		(var altVision:bool = "cameraEntity.camera.altVision" (event "cameraEntity.camera.evAltVisionChanged"))
		(var altVisionEnabled:bool = "altVision && !isTactical")

		(var consStateStr:str = "	isReady ? 'RDY' :
									isEmpty ? 'NONE':
									countdownFormat(consStateTime)")
		(var consNumStr:str = "		consNum != 'inf'?
									'x' + consNum	:
									' '")

		(var isConsumableAboutToEnd:bool = "isActive && (consStateTime <= CM2_ENDING_SETTINGS.DURATION)")
		(var isConsumableEnding:bool = "isActive && (consStateTime <= CM2_APPEAR_SETTINGS.DURATION)")

		(var animatedIconAlpha:number = "CM2_DEFAULT_SETTINGS.ALPHA" watch=false)
		(var animatedIconMargin:number = "CM2_DEFAULT_SETTINGS.HEIGHT" watch=false)
		(var isActivatedAnimationPlaying:bool = "false" watch=false)

		(controller $Animation
			(bindcall play  duration="CM2_APPEAR_SETTINGS.DURATION"
							easing="Easing.cubic_out"
							from="{ animatedIconAlpha: CM2_APPEAR_SETTINGS.ALPHA_MIN, animatedIconMargin: CM2_APPEAR_SETTINGS.HEIGHT_MAX }"
							to=	 "{ animatedIconAlpha: CM2_APPEAR_SETTINGS.ALPHA_MAX, animatedIconMargin: CM2_APPEAR_SETTINGS.HEIGHT_MIN }"
							(bind enabled "isActive")
							(event "evPlayActivatedAnimation")
			)
			(bind isActivatedAnimationPlaying	"true"  init=false on=evAnimStarted)
			(bind isActivatedAnimationPlaying	"false" init=false on=evAnimEnded)
		)
		(controller $Animation
			(bindcall play  id='aboutToEndAnim'
							duration="CM2_ENDING_SETTINGS.BLINK"
							repeatCount=-1
							easing="Easing.sine_in"
							from="{ animatedIconAlpha: CM2_ENDING_SETTINGS.ALPHA_MAX }"
							to=  "{ animatedIconAlpha: CM2_ENDING_SETTINGS.ALPHA_MIN }"
							(bind enabled "isConsumableAboutToEnd && !isActivatedAnimationPlaying")
							(event "evPlayAboutToEndAnimation")
			)
			(bindcall stop id='aboutToEndAnim' (event "evPlayEndingAnimation"))
		)
		(controller $Animation
			(bindcall play  duration="CM2_APPEAR_SETTINGS.DURATION"
							to=	 "{ animatedIconAlpha: CM2_APPEAR_SETTINGS.ALPHA_MIN,	 animatedIconMargin: CM2_APPEAR_SETTINGS.HEIGHT_MAX }"
							easing="Easing.cubic_out"
							(bind enabled "isConsumableEnding")
							(event "evPlayEndingAnimation")
			)
			(bind animatedIconAlpha		"CM2_DEFAULT_SETTINGS.ALPHA" init=false on=evAnimEnded)
			(bind animatedIconMargin	"CM2_DEFAULT_SETTINGS.HEIGHT" init=false on=evAnimEnded)
		)
	)

	(dispatch evPlayActivatedAnimation (bind trigger "isActive") (bind enabled "!isActive"))
	(dispatch evPlayAboutToEndAnimation (bind enabled "isConsumableAboutToEnd && !isActivatedAnimationPlaying"))
	(dispatch evPlayEndingAnimation (bind trigger "isConsumableEnding") (bind enabled "isConsumableEnding"))

	(hblock $enabled="isSpecialConsumable"
		(style
			(bind height "isActive ? 24px : 'auto'")
		)
		(block
			(bind visible "isActive || altVisionEnabled")
			(style
				(bind backgroundImage "consIconPath")
				(scaleX = 0.4)
				(scaleY = 0.4)
				(width = 60px)
				(height = 60px)
				(bind marginTop "animatedIconMargin")
				(bind alpha "animatedIconAlpha")
			)
		)
		(block
			(bind visible "altVisionEnabled")
			(style
				(width = 24px)#need to be even number?
			)
			(element ConsumableMarkerTextItem "consStateStr" "consStateColor")
			(element ConsumableMarkerTextItem "consNumStr" "consStateColor")
		)
	)
)

#--------------------------------------------------------------------------------
#TTXs
#--------------------------------------------------------------------------------
(def element TP_ShipConfigurationsItem(_entity:gfx=null, _isAlly:bool=false, _userPrefsNum:gfx=null)
	(scope
		(var avatarId:number = "_entity ? _entity.avatar.id : 0")

		#Classic TTX
		(var ttxCollection:gfx = "$datahub.getCollection(CC.mods_ShipParamsInBattle)")
		(var ttxEntity:gfx = "$datahub.getPrimaryEntity(CC.mods_ShipParamsInBattle, avatarId)" (event "ttxCollection.evAdded"))
		(var classicTTX:gfx = "ttxEntity ? ttxEntity.mods_ShipParamsInBattle.shipTTX : null")

		#New TTX
		(var shipBattleInfoCollection:gfx = "$datahub.getCollection(CC.shipBattleInfo)")
		(var shipBattleInfoEntity:gfx = "$datahub.getPrimaryEntity(CC.shipBattleInfo, avatarId)" (event "shipBattleInfoCollection.evAdded"))
		(var shipBattleInfo:gfx = "shipBattleInfoEntity ? shipBattleInfoEntity.shipBattleInfo : null" (event "shipBattleInfoEntity.shipBattleInfo.evChanged"))
		(var newTTX:gfx = "shipBattleInfo ? shipBattleInfo.shipTTX : null")

		(var isRealParams:bool = "shipBattleInfo ? shipBattleInfo.isRealParams : false")
		(var shipTTX:gfx = "isRealParams ? newTTX : classicTTX")

		(macro TP_GET_PREF_BOOL _varName="'isVisibleOnlyAlt'" _pref="TP_PREFS.STATS_ALT_VISIBLE")
		(var camera:gfx = "$datahub.getSingleComponent(CC.camera)")
		(var altVision:bool = "camera ? camera.altVision : false" (event "camera.evAltVisionChanged"))
	)

	(bind visible "isVisibleOnlyAlt ? altVision : true")

	(hblock
		(style
			(align = "middle|center")
			(bind flow "_isAlly ? Flow.HORIZONTAL : Flow.REVERSE_HORIZONTAL")
			(height = "TP_PLAYER_ROW_SIZE.HEIGHT")
		)
		(element TP_ShipConfigVisibilityItem "shipTTX" _avatarEntity="_entity" _isRealParams="isRealParams" _userPrefsNum="_userPrefsNum")
		(element TP_ShipConfigMobilityItem "shipTTX" _userPrefsNum="_userPrefsNum")
		(element TP_ShipConfigAirSupportItem "shipTTX" _userPrefsNum="_userPrefsNum")
		(element TP_ShipConfigAirDefenseItem "shipTTX" _userPrefsNum="_userPrefsNum")
		(element TP_ShipConfigAtbaItem "shipTTX" _avatarEntity="_entity" _isRealParams="isRealParams" _userPrefsNum="_userPrefsNum") #Forces shipBattleInfoTTX so it always shows the max dist for the enemy
		(element TP_ShipConfigArtilleryItem "shipTTX" _userPrefsNum="_userPrefsNum")
		(element TP_ShipConfigTorpedoItem "shipTTX" _userPrefsNum="_userPrefsNum")
		#(element TP_ShipConfigBatteryItem "shipTTX")
		(element TP_ShipConfigSurfaceConsumableItem "shipTTX" _avatarEntity="_entity" _userPrefsNum="_userPrefsNum")
		(element TP_ShipConfigSubmarineConsumableItem "shipTTX" _avatarEntity="_entity" _userPrefsNum="_userPrefsNum")
	)
)

(def element TP_ShipConfigArtilleryItem(_shipTTX:gfx, _userPrefsNum:gfx=null)
	(scope
		(var artilleryTTX:gfx = "_shipTTX ? _shipTTX.artillery : null")
		(var hasMainGun:bool = "artilleryTTX ? artilleryTTX.mainGun.length > 0 : false")
		(var range:number = "artilleryTTX ? artilleryTTX.mgMaxDist.value : null")
		(var reload:number = "artilleryTTX ? artilleryTTX.mgReloadTime.value : null")
		(macro TP_GET_PREF_BOOL _varName="'isArtilleryRangeVisible'" _pref="TP_PREFS.ARTILLERY_RANGE")
		(macro TP_GET_PREF_BOOL _varName="'isArtilleryReloadVisible'" _pref="TP_PREFS.ARTILLERY_RELOAD")
		(var isEnabled:bool = "isArtilleryRangeVisible || isArtilleryReloadVisible")
	)

	(bind visible "isEnabled")

	(style
		(bind alpha "hasMainGun ? 1.0 : 0.0")
		(vgap = "TP_CONFIG_ELEMENTS_VGAP")
	)

	(element TP_ShipConfigTextItem _value="range" _unit="'km'" _userPrefsNum="_userPrefsNum"
		(bind visible "isArtilleryRangeVisible")
	)
	(element TP_ShipConfigTextItem _value="reload" _unit="'s'" _userPrefsNum="_userPrefsNum"
		(bind visible "isArtilleryReloadVisible")
	)
)

(def element TP_ShipConfigTorpedoItem(_shipTTX:gfx, _userPrefsNum:gfx=null)
	(scope
		#Surface Torps
		(var torpedoesTTX:gfx = "_shipTTX ? _shipTTX.torpedoes : null")
		#normal torps
		(var torpedoTTX:gfx = "torpedoesTTX ? torpedoesTTX.torpedo : null")
		(var torpedoRange:number = "torpedoTTX ? torpedoTTX.maxDist.value : null")
		(var torpedoRangeStr:str = "torpedoTTX ? formatFloatingPoint(torpedoRange, 1) : ''")
		#deepwater torps
		(var torpedoDeepwaterTTX:gfx = "torpedoesTTX ? torpedoesTTX.torpedoDeepwater : null")
		(var torpedoDeepwaterRange:number = "torpedoDeepwaterTTX ? torpedoDeepwaterTTX.maxDist.value : null")
		(var torpedoDeepwaterRangeStr:str = "torpedoDeepwaterTTX ? formatFloatingPoint(torpedoDeepwaterRange, 1) : ''")
		#alt torps
		(var torpedoAltTTX:gfx = "torpedoesTTX ? torpedoesTTX.torpedoAlt : null")
		(var torpedoAltRange:number = "torpedoAltTTX ? torpedoAltTTX.maxDist.value : null")
		(var torpedoAltRangeStr:str = "torpedoAltTTX ? formatFloatingPoint(torpedoAltRange, 1) : ''")
		#all ranges
		(var ranges:str = "	torpedoRangeStr + 
							(torpedoRange && torpedoDeepwaterRange ? '/' : '') + torpedoDeepwaterRangeStr +
							(((torpedoRange || torpedoDeepwaterRange) && torpedoAltRange) ? '/' : '') + torpedoAltRangeStr
		")

		#(var reload:number = "torpedoesTTX.reloadTime.value")


		#Submarine torps
		(var torpedoGroupsTTX:gfx = "_shipTTX ? _shipTTX.torpedoGroups : null")
		#normal torps
		(var subTorpedoTTX:gfx = "torpedoGroupsTTX ? torpedoGroupsTTX.torpedo : null")
		(var subTorpedoRange:number = "subTorpedoTTX ? subTorpedoTTX.maxDist.value : null")
		#deepwater torps
		(var subTorpedoDeepwaterTTX:gfx = "torpedoGroupsTTX ? torpedoGroupsTTX.torpedoDeepwater : null")
		(var subTorpedoDeepwaterRange:number = "subTorpedoDeepwaterTTX ? subTorpedoDeepwaterTTX.maxDist.value : null")
		#alt torps
		(var subTorpedoAltTTX:gfx = "torpedoGroupsTTX ? torpedoGroupsTTX.torpedoAlt : null")
		(var subTorpedoAltRange:number = "subTorpedoAltTTX ? subTorpedoAltTTX.maxDist.value : null")

		#(var reload:number = "torpedoGroupsTTX.reloadTime.value")

		
		(macro TP_GET_PREF_BOOL _varName="'isTorpedoRangeVisible'" _pref="TP_PREFS.TORPEDO_RANGE")
		(var isEnabled:bool = "isTorpedoRangeVisible")
	)

	(bind visible "isEnabled")

	(style
		(bind alpha "torpedoesTTX || torpedoGroupsTTX ? 1.0 : 0.0")
		(vgap = "TP_CONFIG_ELEMENTS_VGAP")
	)

	(element TP_ShipConfigTextItem _value="torpedoRange" _unit="'km'" _userPrefsNum="_userPrefsNum"
		(bind visible "!(torpedoesTTX || torpedoGroupsTTX) || torpedoRange") #shows if there is no torp just for margin
	)
	(element TP_ShipConfigTextItem _value="torpedoDeepwaterRange" _unit="'km'" _userPrefsNum="_userPrefsNum"
		(bind visible "torpedoDeepwaterRange")
	)
	(element TP_ShipConfigTextItem _value="torpedoAltRange" _unit="'km'" _userPrefsNum="_userPrefsNum"
		(bind visible "torpedoAltRange")
	)

	(element TP_ShipConfigTextItem _value="subTorpedoRange" _unit="'km'" _userPrefsNum="_userPrefsNum"
		(bind visible "subTorpedoRange") #shows if there is no torp just for margin
	)
	(element TP_ShipConfigTextItem _value="subTorpedoDeepwaterRange" _unit="'km'" _userPrefsNum="_userPrefsNum"
		(bind visible "subTorpedoDeepwaterRange")
	)
	(element TP_ShipConfigTextItem _value="subTorpedoAltRange" _unit="'km'" _userPrefsNum="_userPrefsNum"
		(bind visible "subTorpedoAltRange")
	)
)

(def element TP_ShipConfigAtbaItem(_shipTTX:gfx, _avatarEntity:gfx, _isRealParams:bool, _userPrefsNum:gfx=null)
	(scope
		(var artilleryTTX:gfx = "_shipTTX ? _shipTTX.artillery : null")
		(var hasSecondaryGun:bool = "artilleryTTX ? artilleryTTX.atba.length > 0 : false")
		(var range:number = "artilleryTTX ? artilleryTTX.atbaMaxDist.value : null")
		(macro TP_GET_PREF_BOOL _varName="'isAtbaRangeVisible'" _pref="TP_PREFS.ATBA_RANGE")
		(var isEnabled:bool = "isAtbaRangeVisible")
		
		#fix for skill---------------------
		(var selfPlayer:gfx = "$datahub.getSingleEntity(CC.playerAvatar)")
		(var avatarComponent:gfx = "_avatarEntity.avatar")

		#shipId -> ownShip (ship in port) -> crewId (crew on board) -> crewSkill (check crew has skill)
		(var isSelf:bool = "selfPlayer ? selfPlayer.avatar.id == avatarComponent.id : false")
		(var shipId:number = "avatarComponent ? avatarComponent.ship.ref.ship.id : null" (event "avatarComponent.evShipRefChanged"))
		(var shipType:str = "avatarComponent ? avatarComponent.shipType : null" (event "avatarComponent.evShipTypeChanged"))
		(var ownShipEntity:gfx = "$datahub.getPrimaryEntity(CC.ownShip, shipId)")

		(var skillId:number = "shipType in TP_ATBA_SKILL_ID ? TP_ATBA_SKILL_ID[shipType] : null")
		(var skillEntity:gfx = "$datahub.getPrimaryCompositeEntity(CC.skill, skillId, shipType, TP_ATBA_CREW_ID)")
		
		(var crewId:number = "ownShipEntity ? ownShipEntity.ownShip.crewId : null" (event "ownShipEntity.ownShip.evCrewChanged"))
		(var crewSkillEntity:gfx = "$datahub.getPrimaryCompositeEntity(CC.crewSkill, crewId, skillEntity.id)")
		#(crewId, skill) -> rutrns crewSkill if the crew is onboard and has skill

		(var isCorrectionNeeded:bool = "!(crewSkillEntity || isSelf || _isRealParams)")

		(var modifiers:dict = "skillEntity ? skillEntity.attributes.modifiers : null")
		(var rangeModifier:number = "isCorrectionNeeded && modifiers ? (1 + modifiers.GSMaxDist * 0.01) : 1.0") #value is negative and %
		#---------------------

		#fix------------------
		(var modifiedAtbaRange:number = "range * rangeModifier") #CAPTAIN SKILL FIX
		#---------------------
	)

	(bind visible "isEnabled")

	(style
		(bind alpha "hasSecondaryGun ? 1.0 : 0.0")
		(vgap = "TP_CONFIG_ELEMENTS_VGAP")
	)

	(element TP_ShipConfigTextItem _value="modifiedAtbaRange" _unit="'km'" _userPrefsNum="_userPrefsNum"
		(bind visible "isAtbaRangeVisible")
	)
)

(def element TP_ShipConfigAirDefenseItem(_shipTTX:gfx, _userPrefsNum:gfx=null)
	(scope
		(var airDefenseTTX:gfx = "_shipTTX ? _shipTTX.airDefense : null")
		(var range:number = "airDefenseTTX ? airDefenseTTX.averageAura.maxDist.value : null")
		(var integralValue:number = "airDefenseTTX ? airDefenseTTX.integralValue.value : 0")
		(macro TP_GET_PREF_BOOL _varName="'isAntiAirRangeVisible'" _pref="TP_PREFS.ANTIAIR_RANGE")
		(macro TP_GET_PREF_BOOL _varName="'isAntiAirRatingVisible'" _pref="TP_PREFS.ANTIAIR_RATE")
		(var isEnabled:bool = "isAntiAirRangeVisible || isAntiAirRatingVisible")
	)

	(bind visible "isEnabled")

	(style
		(bind alpha "airDefenseTTX ? 1.0 : 0.0")
		(vgap = "TP_CONFIG_ELEMENTS_VGAP")
	)

	(element TP_ShipConfigTextItem _value="range" _unit="'km'" _userPrefsNum="_userPrefsNum"
		(bind visible "isAntiAirRangeVisible")
	)
	(element TP_ShipConfigTextItem _value="integralValue" _unit="'AA'" _roundDigit=0 _userPrefsNum="_userPrefsNum"
		(bind visible "isAntiAirRatingVisible")
	)
)

(def element TP_ShipConfigAirSupportItem(_shipTTX:gfx, _userPrefsNum:gfx=null)
	(scope
		(var airSupportTTX:gfx = "_shipTTX ? _shipTTX.airSupport : null")
		(var range:number = "airSupportTTX ? airSupportTTX.maxDist.value : null")
		(var reload:number = "airSupportTTX ? airSupportTTX.reloadTime.value : null")
		(macro TP_GET_PREF_BOOL _varName="'isAirSupportRangeVisible'" _pref="TP_PREFS.AIRSUPPORT_RANGE")
		(macro TP_GET_PREF_BOOL _varName="'isAirSupportReloadVisible'" _pref="TP_PREFS.AIRSUPPORT_RELOAD")
		(var isEnabled:bool = "isAirSupportRangeVisible || isAirSupportReloadVisible")
	)

	(bind visible "isEnabled")

	(style
		(bind alpha "airSupportTTX ? 1.0 : 0.0")
		(vgap = "TP_CONFIG_ELEMENTS_VGAP")
	)

	(element TP_ShipConfigTextItem _value="range" _unit="'km'" _userPrefsNum="_userPrefsNum"
		(bind visible "isAirSupportRangeVisible")
	)
	(element TP_ShipConfigTextItem _value="reload" _unit="'s'" _userPrefsNum="_userPrefsNum"
		(bind visible "isAirSupportReloadVisible")
	)
)

(def element TP_ShipConfigBatteryItem(_shipTTX:gfx)
	(scope
		(var batteryTTX:gfx = "_shipTTX.mods_ShipParamsInBattle.shipTTX.battery")
		(var capacity:number = "batteryTTX ? batteryTTX.capacity.value : null")
	)

	#(bind visible "batteryTTX")
	(style
		(bind alpha "batteryTTX ? 1.0 : 0.0")
		(width = "TP_SHIPCONFIG_ELEMENT_WIDTH.WITH_UNIT")
	)

	(style
		(align = "middle|center")
	)
	(block
		(element TP_ShipConfigTextItem _value="capacity" _unit="'s'" _userPrefsNum="_userPrefsNum")
	)
)

(def element TP_ShipConfigMobilityItem(_shipTTX:gfx, _userPrefsNum:gfx=null)
	(scope
		#surface speed
		(var mobilityTTX:gfx = "_shipTTX ? _shipTTX.mobility : null")
		(var surfaceSpeed:number = "mobilityTTX ? mobilityTTX.speed.value : null")

		#underwater speed
		(var underwaterMobilityTTX:gfx = "_shipTTX ? _shipTTX.underwaterMobility : null")
		(var underwaterSpeed:number = "underwaterMobilityTTX ? underwaterMobilityTTX.speed.value : null")

		(macro TP_GET_PREF_BOOL _varName="'isSurfaceMobilityVisible'" _pref="TP_PREFS.SPEED_SURFACE")
		(macro TP_GET_PREF_BOOL _varName="'isUnderwaterMobilityVisible'" _pref="TP_PREFS.SPEED_UNDERWATER")
		(var isEnabled:bool = "isSurfaceMobilityVisible || isUnderwaterMobilityVisible")
	)

	(bind visible "isEnabled")
	
	(style
		(bind alpha "mobilityTTX || underwaterMobilityTTX ? 1.0 : 0.0")
		(vgap = "TP_CONFIG_ELEMENTS_VGAP")
	)

	(element TP_ShipConfigTextItem _value="surfaceSpeed" _unit="'kts'" _userPrefsNum="_userPrefsNum"
		(bind visible "isSurfaceMobilityVisible")
	)
	(element TP_ShipConfigTextItem _value="underwaterSpeed" _unit="'kts'" _userPrefsNum="_userPrefsNum"
		(bind visible "isUnderwaterMobilityVisible")
	)
)

(def element TP_ShipConfigVisibilityItem(_shipTTX:gfx, _avatarEntity:gfx, _isRealParams:bool, _userPrefsNum:gfx=null)
	(scope
		#fix for skill---------------------
		(var selfPlayer:gfx = "$datahub.getSingleEntity(CC.playerAvatar)")
		(var avatarComponent:gfx = "_avatarEntity.avatar")

		#shipId -> ownShip (ship in port) -> crewId (crew on board) -> crewSkill (check crew has skill)
		(var isSelf:bool = "selfPlayer ? selfPlayer.avatar.id == avatarComponent.id : false")
		(var shipId:number = "avatarComponent ? avatarComponent.ship.ref.ship.id : null" (event "avatarComponent.evShipRefChanged"))
		(var shipType:str = "avatarComponent ? avatarComponent.shipType : null" (event "avatarComponent.evShipTypeChanged"))
		(var ownShipEntity:gfx = "$datahub.getPrimaryEntity(CC.ownShip, shipId)")

		(var skillId:number = "shipType in TP_CONCEALMENT_SKILL_ID ? TP_CONCEALMENT_SKILL_ID[shipType] : null")
		(var skillEntity:gfx = "$datahub.getPrimaryCompositeEntity(CC.skill, skillId, shipType, TP_CONCEALMENT_CREW_ID)")
		
		(var crewId:number = "ownShipEntity ? ownShipEntity.ownShip.crewId : null" (event "ownShipEntity.ownShip.evCrewChanged"))
		(var crewSkillEntity:gfx = "$datahub.getPrimaryCompositeEntity(CC.crewSkill, crewId, skillEntity.id)")
		#(crewId, skill) -> rutrns crewSkill if the crew is onboard and has skill

		(var isCorrectionNeeded:bool = "!(crewSkillEntity || isSelf || _isRealParams)")

		(var modifiers:dict = "skillEntity ? skillEntity.attributes.modifiers : null")
		(var visibilityModifier:number = "isCorrectionNeeded && modifiers ? (1 + modifiers.visibilityDistCoeff * 0.01) : 1.0") #value is negative and %
		#---------------------

		#ttx
		(var visibilityTTX:gfx = "_shipTTX ? _shipTTX.visibility : null")
		(var visibilityByShip:number = "visibilityTTX ? visibilityTTX.visibilityByShip.normal.value : null") #CAPTAIN SKILL FIX
		(var visibilityByPlane:number = "visibilityTTX ? visibilityTTX.visibilityByPlane.normal.value : null") #CAPTAIN SKILL FIX

		#fix------------------
		(var modifiedVisibilityByShip:number = "visibilityByShip * visibilityModifier") #CAPTAIN SKILL FIX
		(var modifiedVisibilityByPlane:number = "visibilityByPlane * visibilityModifier") #CAPTAIN SKILL FIX
		#---------------------

		(macro TP_GET_PREF_BOOL _varName="'isVisibilityByShipVisible'" _pref="TP_PREFS.VISIBILITY_SURFACE")
		(macro TP_GET_PREF_BOOL _varName="'isVisibilityByPlaneVisible'" _pref="TP_PREFS.VISIBILITY_AIR")
		(var isEnabled:bool = "isVisibilityByShipVisible || isVisibilityByPlaneVisible")
	)

	(bind visible "isEnabled")
	(style
		(bind alpha "visibilityTTX ? 1.0 : 0.0")
		(vgap = "TP_CONFIG_ELEMENTS_VGAP")
	)

	(element TP_ShipConfigTextItem _value="modifiedVisibilityByShip" _unit="'km'" _userPrefsNum="_userPrefsNum"
		(bind visible "isVisibilityByShipVisible")
	)
	(element TP_ShipConfigTextItem _value="modifiedVisibilityByPlane" _unit="'km'" _userPrefsNum="_userPrefsNum"
		(bind visible "isVisibilityByPlaneVisible")
	)
)

(def element TP_ShipConfigSurfaceConsumableItem(_shipTTX:gfx, _avatarEntity:gfx, _userPrefsNum:gfx=null)
	(scope
		(var shipId:str = "_avatarEntity ? toString(_avatarEntity.avatar.ship.ref.ship.id) : null" (event "_avatarEntity.avatar.evShipRefChanged"))
		(var consumables:dict = "shipId in TP_CONSUMABLES_DATA ? TP_CONSUMABLES_DATA[shipId] : null")
		(var radarRange:number = "consumables && 'rls' in consumables ? consumables['rls'] : null")
		(var hydroRange:number = "consumables && 'sonar' in consumables ? consumables['sonar'] : null")

		(macro TP_GET_PREF_BOOL _varName="'isRadarRangeVisible'" _pref="TP_PREFS.RADAR_RANGE")
		(macro TP_GET_PREF_BOOL _varName="'isHydroRangeVisible'" _pref="TP_PREFS.HYDRO_RANGE")
		(var isEnabled:bool = "isRadarRangeVisible || isHydroRangeVisible")
	)

	(bind visible "isEnabled")
	(style
		(bind alpha "consumables ? 1.0 : 0.0")
		(vgap = "TP_CONFIG_ELEMENTS_VGAP")
	)

	(element TP_ShipConfigTextItem _value="hydroRange" _unit="'km'" _userPrefsNum="_userPrefsNum" _showNull=true
		(bind visible "isHydroRangeVisible")
	)
	(element TP_ShipConfigTextItem _value="radarRange" _unit="'km'" _userPrefsNum="_userPrefsNum" _showNull=true
		(bind visible "isRadarRangeVisible")
	)
)

(def element TP_ShipConfigSubmarineConsumableItem(_shipTTX:gfx, _avatarEntity:gfx, _userPrefsNum:gfx=null)
	(scope
		(var shipId:str = "_avatarEntity ? toString(_avatarEntity.avatar.ship.ref.ship.id) : null" (event "_avatarEntity.avatar.evShipRefChanged"))
		(var consumables:dict = "shipId in TP_CONSUMABLES_DATA ? TP_CONSUMABLES_DATA[shipId] : null")
		(var radarRange:number = "consumables && 'submarineLocator' in consumables ? consumables['submarineLocator'] : null")
		(var hydroRange:number = "consumables && 'hydrophone' in consumables ? consumables['hydrophone'] : null")

		(macro TP_GET_PREF_BOOL _varName="'isSubRadarRangeVisible'" _pref="TP_PREFS.SUB_RADAR_RANGE")
		(macro TP_GET_PREF_BOOL _varName="'isSubHydroRangeVisible'" _pref="TP_PREFS.SUB_HYDRO_RANGE")
		(var isEnabled:bool = "isSubRadarRangeVisible || isSubHydroRangeVisible")
	)

	(bind visible "isEnabled")

	(style
		(bind alpha "consumables ? 1.0 : 0.0")
		(vgap = "TP_CONFIG_ELEMENTS_VGAP")
	)

	(element TP_ShipConfigTextItem _value="hydroRange" _unit="'km'" _userPrefsNum="_userPrefsNum" _showNull=true
		(bind visible "isSubHydroRangeVisible")
	)
	(element TP_ShipConfigTextItem _value="radarRange" _unit="'km'" _userPrefsNum="_userPrefsNum" _showNull=true
		(bind visible "isSubRadarRangeVisible")
	)
)

#Image Item
(def element TP_ShipConfigImageItem (_iconPath:str, _alpha:number="1.0", _isVisible:bool=true, _tooltipTitle:str='', _tooltipTexts:array=[], _userPrefsNum:gfx=null)
	(scope
		(macro TP_GET_PREF_BOOL _varName="'isUnitVisible'" _pref="TP_PREFS.UNITS_VISIBLE")
	)
	(bind visible "_isVisible")
	(style
		(bind width "isUnitVisible ? TP_SHIPCONFIG_ELEMENT_WIDTH.WITH_UNIT : TP_SHIPCONFIG_ELEMENT_WIDTH.NO_UNIT")
		(align = "middle|center")
		(bind alpha "_alpha")
	)
	(block
		(style
			(height = 20)
			(width = 20)
			(bind backgroundImage "_iconPath")
			(backgroundSize = "fill")
		)
	)

	(controller $Tooltip layout=true
		(renderer='TP_ShipConfigTooltipHint')
		(args
			_tooltipTitle="_tooltipTitle"
			_tooltipTexts="_tooltipTexts"
		)
		(align="top|center")
		(position="border")
		(offset=[0, 10])
		(screenBoundsOffset={left:10, top:10, right:10, bottom:10})
		(macro SIMPLE_TOOLTIP_ANIMATION)
	)
)

(def element TP_ShipConfigTooltipHint(_tooltipTitle:str, _tooltipTexts:array=[]) layout=true
	(style (width = "200px") (hitTest = false))

	(macro TOOLTIP_SYSTEM_DEFAULT_BACKGROUND)

	(element TOOLTIP_SYSTEM_DEFAULT_CONTAINER
		(element TooltipSystemHeaderSubheaderText
			_headerText="_tooltipTitle"
		)

		(element TooltipSystemHorizontalDivider)

		(controller $Repeat #layout=true
			(renderer='TooltipSystemStatusLine')
			(bind count "_tooltipTexts.length")
			(args
				_text="_tooltipTexts[$index]"
			)
			(exprs
				(style
					(bind marginTop "$index == 0 ? 0 : 5px")
				)
			)
		)
	)
)

#Text Item
(def element TP_ShipConfigTextItem (_value:number, _unit:str=null, _showZero:bool=false, _showNull:bool=false, _roundDigit:number="1.0", _userPrefsNum:gfx=null)
	(scope
		(var isNull:bool = "_value == null")
		(var isZero:bool = "_value == 0")
		(var isValueVisible:bool = "(isNull && _showNull) || (isZero && _showZero) || _value")
		(macro TP_GET_PREF_BOOL _varName="'isUnitVisible'" _pref="TP_PREFS.UNITS_VISIBLE")
		(macro TP_GET_PREF_BOOL _varName="'isBoldFont'"    _pref="TP_PREFS.STATS_BOLD_FONT")
	)

	(style
		(bind width "isUnitVisible ? TP_SHIPCONFIG_ELEMENT_WIDTH.WITH_UNIT : TP_SHIPCONFIG_ELEMENT_WIDTH.NO_UNIT")
		(align = "right")
	)
	(hblock
		(bind visible "isValueVisible")
		(style
			(marginRight = "XS")
		)
		(tf
			(bind class "isBoldFont ? '$TP_ShipConfigTextBold' : '$TP_ShipConfigText'")
			(style
				(marginRight = "XS")
			)
			(bind text "isNull ? ' ' : formatFloatingPoint(_value, _roundDigit)")
		)
		(tf
			(bind visible "isUnitVisible")
			(class $TP_ShipConfigText)
			(bind text "isNull ? ' ' : _unit")
			(alpha = "TC")
			(style
				(width = "20px")
			)
		)
	)
)

#--------------------------------------------------------------------------------
#Tooltip Items
#--------------------------------------------------------------------------------
(def element TP_TooltipShipConfigurationsItem(_entity:gfx=null, _userPrefsNum:gfx=null)
	(scope
		(var avatarId:number = "_entity ? _entity.avatar.id : 0")

		#Classic TTX
		(var ttxCollection:gfx = "$datahub.getCollection(CC.mods_ShipParamsInBattle)")
		(var ttxEntity:gfx = "$datahub.getPrimaryEntity(CC.mods_ShipParamsInBattle, avatarId)" (event "ttxCollection.evAdded"))

		#New TTX
		(var shipBattleInfoCollection:gfx = "$datahub.getCollection(CC.shipBattleInfo)")
		(var shipBattleInfoEntity:gfx = "$datahub.getPrimaryEntity(CC.shipBattleInfo, avatarId)" (event "shipBattleInfoCollection.evAdded"))
		(var shipBattleInfo:gfx = "shipBattleInfoEntity ? shipBattleInfoEntity.shipBattleInfo : null" (event "shipBattleInfoEntity.shipBattleInfo.evChanged"))

		(var isRealParams:bool = "shipBattleInfo ? shipBattleInfo.isRealParams : false")
		(var shipTTX:gfx = "isRealParams ? shipBattleInfo.shipTTX : ttxEntity.mods_ShipParamsInBattle.shipTTX")
	)

	(style
		(align = "middle|center")
		(hitTest = false)
	)

	(macro TOOLTIP_SYSTEM_DEFAULT_BACKGROUND)

	(element TOOLTIP_SYSTEM_DEFAULT_CONTAINER
		(style
			(vgap = 10px)
			(width = 300px)
		)
		(element TP_TooltipArtilleryItem "shipTTX")
		(element TP_TooltipAtbaItem "shipTTX" _avatarEntity="_entity" _isRealParams="isRealParams")
		(element TP_TooltipTorpedoItem "shipTTX")
		(element TP_TooltipAirDefenseItem "shipTTX")
		(element TP_TooltipAirSupportItem "shipTTX")
		(element TP_TooltipDepthChargeItem "shipTTX")
		(element TP_TooltipMobilityItem "shipTTX")
		(element TP_TooltipVisibilityItem "shipTTX" _avatarEntity="_entity" _isRealParams="isRealParams")
		(element TP_TooltipConsumableItem "shipBattleInfo")
	)
)

(def element TP_TooltipArtilleryItem(_shipTTX:gfx, _userPrefsNum:gfx=null)
	(scope
		(var artilleryTTX:gfx = "_shipTTX.artillery")
		(var mainGunTTX:array = "artilleryTTX ? artilleryTTX.mainGun : null")
		(var hasMainGun:bool = "mainGunTTX.length > 0")
		(var range:number = "artilleryTTX ? artilleryTTX.mgMaxDist.value : null")
		(var reload:number = "artilleryTTX ? artilleryTTX.mgReloadTime.value : null")

		#awful code. someone must fix this not me
		#repeat didn't work out well though
		(var numBarrels1:number = "hasMainGun ? mainGunTTX[0].numBarrels.value * mainGunTTX[0].numGuns.value : 0")
		(var numBarrels2:number = "mainGunTTX.length > 1 ? mainGunTTX[1].numBarrels.value * mainGunTTX[1].numGuns.value : 0")
		(var numBarrels3:number = "mainGunTTX.length > 2 ? mainGunTTX[2].numBarrels.value * mainGunTTX[2].numGuns.value : 0")
		(var numBarrels4:number = "mainGunTTX.length > 3 ? mainGunTTX[3].numBarrels.value * mainGunTTX[3].numGuns.value : 0")
		(var totalBarrelsCount:number = "numBarrels1 + numBarrels2 + numBarrels3 + numBarrels4")
		(var shellsPerMin:number = "totalBarrelsCount * (60 / reload) * 0.33")

		(var altFire:gfx = "artilleryTTX ? artilleryTTX.altFireMode : null")
		(var altFireShots:number = "altFire ? altFire.numShots.value : null")
		(var altFireReload:number = "altFire ? altFire.reloadTime.value : null")

		(var ammoHE:gfx = "artilleryTTX ? artilleryTTX.ammoHE : null")
		(var ammoCS:gfx = "artilleryTTX ? artilleryTTX.ammoCS : null")
		(var ammoAP:gfx = "artilleryTTX ? artilleryTTX.ammoAP : null")

		(var pircingHE:number = "ammoHE ? ammoHE.piercing.value : null")
		(var pircingCS:number = "ammoCS ? ammoCS.piercing.value : null")
		(var pircingAP:number = "ammoAP ? ammoAP.piercing.value * 0.001 : null")

		(var damageHE:number = "ammoHE ? ammoHE.damage.value : 0")
		(var damageCS:number = "ammoCS ? ammoCS.damage.value : 0")
		(var damageAP:number = "ammoAP ? ammoAP.damage.value : 0")

		(var damagePerMinHE:number = "damageHE * shellsPerMin")
		(var damagePerMinCS:number = "damageCS * shellsPerMin")
		(var damagePerMinAP:number = "damageAP * shellsPerMin")

		(var caliber:number = "hasMainGun ? mainGunTTX[0].caliber.value : 0")
		(var overmatch:number = "hasMainGun ? floor(caliber / 14.3) : 0")
	)

	(style
		(align = "middle|center")
	)
	(bind visible "hasMainGun")

	(vtile
		(style
			(vgap = "TP_TOOLTIP_ELEMENTS_VGAP")
		)

		(element TP_TooltipShipConfigTitleItem _title="'IDS_SHIP_PARAM_MAIN_GUN'")

		(block
			(element TP_TooltipShipConfigTextItem _title="'IDS_SHIP_PARAM_MAX_DIST'" _value="range" _unit="'km'" _userPrefsNum="_userPrefsNum")
			(element TP_TooltipShipConfigTextItem _title="'IDS_SHIP_PARAM_SHOT_DELAY'" _value="reload" _unit="'s'" _userPrefsNum="_userPrefsNum")
		)

		(block
			(element TP_TooltipShipConfigTextItem _title="'IDS_SHIP_PARAM_ARTILLERY_CALIBER'" _value="caliber" _roundDigit=0 _unit="'mm'" _userPrefsNum="_userPrefsNum")
			(element TP_TooltipShipConfigTextItem _title="'Overmatch'" _value="overmatch" _roundDigit=0 _unit="'mm'" _userPrefsNum="_userPrefsNum")
		)

		(block
			(bind visible "altFire")
			(element TP_TooltipShipConfigTextItem _title="'IDS_SHIP_PARAM_BURST_FIRE_SALVO_COUNT'" _value="altFireShots" _roundDigit=0 _unit=null _userPrefsNum="_userPrefsNum")
			(element TP_TooltipShipConfigTextItem _title="'IDS_SHIP_PARAM_BURST_FIRE_RELOAD_TIME'" _value="altFireReload" _unit="'s'" _userPrefsNum="_userPrefsNum")
		)

		(block
			(element TP_TooltipShipConfigTextItem _title="'HE DPM'" _value="damagePerMinHE" _roundDigit=0 _unit=null _userPrefsNum="_userPrefsNum")
			(element TP_TooltipShipConfigTextItem _title="'SAP DPM'" _value="damagePerMinCS" _roundDigit=0 _unit=null _userPrefsNum="_userPrefsNum")
			(element TP_TooltipShipConfigTextItem _title="'AP DPM'" _value="damagePerMinAP" _roundDigit=0 _unit=null _userPrefsNum="_userPrefsNum")
		)

		(block
			(element TP_TooltipShipConfigTextItem _title="'HE Penetration'" _value="pircingHE" _unit="'mm'" _roundDigit=0 _userPrefsNum="_userPrefsNum")
			(element TP_TooltipShipConfigTextItem _title="'SAP Penetration'" _value="pircingCS" _unit="'mm'" _roundDigit=0 _userPrefsNum="_userPrefsNum")
			(element TP_TooltipShipConfigTextItem _title="'AP Penetration'" _value="pircingAP" _unit="'mm'" _roundDigit=0 _userPrefsNum="_userPrefsNum")
		)
	)
)

(def element TP_TooltipAtbaItem(_shipTTX:gfx, _avatarEntity:gfx, _isRealParams:bool, _userPrefsNum:gfx=null)
	(scope
		(var artilleryTTX:gfx = "_shipTTX.artillery")
		(var hasSecondaryGun:bool = "artilleryTTX ? artilleryTTX.atba.length > 0 : false")
		(var range:number = "artilleryTTX ? artilleryTTX.atbaMaxDist.value : null")

		#fix for skill---------------------
		(var selfPlayer:gfx = "$datahub.getSingleEntity(CC.playerAvatar)")
		(var avatarComponent:gfx = "_avatarEntity.avatar")

		#shipId -> ownShip (ship in port) -> crewId (crew on board) -> crewSkill (check crew has skill)
		(var isSelf:bool = "selfPlayer ? selfPlayer.avatar.id == avatarComponent.id : false")
		(var shipId:number = "avatarComponent ? avatarComponent.ship.ref.ship.id : null" (event "avatarComponent.evShipRefChanged"))
		(var shipType:str = "avatarComponent ? avatarComponent.shipType : null" (event "avatarComponent.evShipTypeChanged"))
		(var ownShipEntity:gfx = "$datahub.getPrimaryEntity(CC.ownShip, shipId)")

		(var skillId:number = "shipType in TP_ATBA_SKILL_ID ? TP_ATBA_SKILL_ID[shipType] : null")
		(var skillEntity:gfx = "$datahub.getPrimaryCompositeEntity(CC.skill, skillId, shipType, TP_ATBA_CREW_ID)")
		
		(var crewId:number = "ownShipEntity ? ownShipEntity.ownShip.crewId : null" (event "ownShipEntity.ownShip.evCrewChanged"))
		(var crewSkillEntity:gfx = "$datahub.getPrimaryCompositeEntity(CC.crewSkill, crewId, skillEntity.id)")
		#(crewId, skill) -> rutrns crewSkill if the crew is onboard and has skill

		(var isCorrectionNeeded:bool = "!(crewSkillEntity || isSelf || _isRealParams)")

		(var modifiers:dict = "skillEntity ? skillEntity.attributes.modifiers : null")
		(var rangeModifier:number = "isCorrectionNeeded && modifiers ? (1 + modifiers.GSMaxDist * 0.01) : 1.0") #value is negative and %
		#---------------------

		#fix------------------
		(var modifiedAtbaRange:number = "range * rangeModifier") #CAPTAIN SKILL FIX
		#---------------------
	)

	(style
		(align = "middle|center")
	)
	(bind visible "hasSecondaryGun")

	(vtile
		(style
			(vgap = "TP_TOOLTIP_ELEMENTS_VGAP")
		)

		(element TP_TooltipShipConfigTitleItem _title="'IDS_SHIP_PARAM_ATBA'")

		(block
			(element TP_TooltipShipConfigTextItem _title="'IDS_SHIP_PARAM_MAX_DIST'" _value="modifiedAtbaRange" _unit="'km'" _userPrefsNum="_userPrefsNum")
		)
	)
)

(def element TP_TooltipTorpedoItem(_shipTTX:gfx, _userPrefsNum:gfx=null)
	(scope
		#Surface Torps
		(var torpedoesTTX:gfx = "_shipTTX.torpedoes")
		#normal torps
		(var torpedoTTX:gfx = "torpedoesTTX ? torpedoesTTX.torpedo : null")
		(var torpedoRange:number = "torpedoTTX ? torpedoTTX.maxDist.value : null")
		(var torpedoDamage:number = "torpedoTTX ? torpedoTTX.damage.value : null")
		#deepwater torps
		(var torpedoDeepwaterTTX:gfx = "torpedoesTTX ? torpedoesTTX.torpedoDeepwater : null")
		(var torpedoDeepwaterRange:number = "torpedoDeepwaterTTX ? torpedoDeepwaterTTX.maxDist.value : null")
		(var torpedoDeepwaterDamage:number = "torpedoDeepwaterTTX ? torpedoDeepwaterTTX.damage.value : null")
		(var torpedoDeepwaterCanHitClasses:array = "torpedoDeepwaterTTX ? torpedoDeepwaterTTX.canHitClasses : null")
		#alt torps
		(var torpedoAltTTX:gfx = "torpedoesTTX ? torpedoesTTX.torpedoAlt : null")
		(var torpedoAltRange:number = "torpedoAltTTX ? torpedoAltTTX.maxDist.value : null")
		(var torpedoAltDamage:number = "torpedoAltTTX ? torpedoAltTTX.damage.value : null")
		#reload
		(var torpdoReload:number = "torpedoesTTX ? torpedoesTTX.reloadTime.value : null")

		#Submarine torps
		(var torpedoGroupsTTX:gfx = "_shipTTX.torpedoGroups")
		#normal torps
		(var subTorpedoTTX:gfx = "torpedoGroupsTTX ? torpedoGroupsTTX.torpedo : null")
		(var subTorpedoRange:number = "subTorpedoTTX ? subTorpedoTTX.maxDist.value : null")
		(var subTorpedoDamage:number = "subTorpedoTTX ? subTorpedoTTX.damage.value : null")
		#deepwater torps
		(var subTorpedoDeepwaterTTX:gfx = "torpedoGroupsTTX ? torpedoGroupsTTX.torpedoDeepwater : null")
		(var subTorpedoDeepwaterRange:number = "subTorpedoDeepwaterTTX ? subTorpedoDeepwaterTTX.maxDist.value : null")
		(var subTorpedoDeepwaterDamage:number = "subTorpedoDeepwaterTTX ? subTorpedoDeepwaterTTX.damage.value : null")
		(var subTorpedoDeepwaterCanHitClasses:number = "subTorpedoDeepwaterTTX ? subTorpedoDeepwaterTTX.canHitClasses : null")
		#alt torps
		(var subTorpedoAltTTX:gfx = "torpedoGroupsTTX ? torpedoGroupsTTX.torpedoAlt : null")
		(var subTorpedoAltRange:number = "subTorpedoAltTTX ? subTorpedoAltTTX.maxDist.value : null")
		(var subTorpedoAltDamage:number = "subTorpedoAltTTX ? subTorpedoAltTTX.damage.value : null")
		#forward reload
		(var torpdoBowReload:number = "(torpedoGroupsTTX && torpedoGroupsTTX.bowGroup) ? torpedoGroupsTTX.bowGroup.reloadTime.value : null")
		(var torpdoBowLoaders:number = "(torpedoGroupsTTX && torpedoGroupsTTX.bowGroup) ? torpedoGroupsTTX.bowGroup.numLoaders.value : null")
		#stern reload
		(var torpdoSternReload:number = "(torpedoGroupsTTX && torpedoGroupsTTX.sternGroup) ? torpedoGroupsTTX.sternGroup.reloadTime.value : null")
		(var torpdoSternLoaders:number = "(torpedoGroupsTTX && torpedoGroupsTTX.sternGroup) ? torpedoGroupsTTX.sternGroup.numLoaders.value : null")
	)

	(style
		(align = "middle|center")
	)

	(bind visible "torpedoesTTX || torpedoGroupsTTX")

	(vtile
		(style
			(vgap = "TP_TOOLTIP_ELEMENTS_VGAP")
		)

		(element TP_TooltipShipConfigTitleItem _title="'IDS_SHIP_PARAM_TORPEDOES'")

		(block
			(bind visible "torpedoesTTX")
			(element TP_TooltipShipConfigTextItem _title="'IDS_SHIP_PARAM_TORPEDO_AMMO'" _value="torpedoRange" _unit="'km'" _userPrefsNum="_userPrefsNum")
			(element TP_TooltipShipConfigTextItem _title="'IDS_SHIP_PARAM_TORPEDO_DEEPWATER_AMMO'" _value="torpedoDeepwaterRange" _unit="'km'" _userPrefsNum="_userPrefsNum")
			(element TP_TooltipShipConfigTextItem _title="'IDS_SHIP_PARAM_TORPEDO_ALTERNATIVE_AMMO'" _value="torpedoAltRange" _unit="'km'" _userPrefsNum="_userPrefsNum")
		)

		(block
			(bind visible "torpedoesTTX")
			(element TP_TooltipShipConfigTextItem _title="'IDS_SHIP_PARAM_TORPEDO_AMMO'" _value="torpedoDamage" _roundDigit=0 _userPrefsNum="_userPrefsNum")
			(element TP_TooltipShipConfigTextItem _title="'IDS_SHIP_PARAM_TORPEDO_DEEPWATER_AMMO'" _value="torpedoDeepwaterDamage" _roundDigit=0 _userPrefsNum="_userPrefsNum")
			(element TP_TooltipShipConfigTextItem _title="'IDS_SHIP_PARAM_TORPEDO_ALTERNATIVE_AMMO'" _value="torpedoAltDamage" _roundDigit=0 _userPrefsNum="_userPrefsNum")
		)

		(block
			(bind visible "torpedoGroupsTTX")
			(element TP_TooltipShipConfigTextItem _title="'IDS_SHIP_PARAM_TORPEDO_AMMO'" _value="subTorpedoRange" _unit="'km'" _userPrefsNum="_userPrefsNum")
			(element TP_TooltipShipConfigTextItem _title="'IDS_SHIP_PARAM_TORPEDO_DEEPWATER_AMMO'" _value="subTorpedoDeepwaterRange" _unit="'km'" _userPrefsNum="_userPrefsNum")
			(element TP_TooltipShipConfigTextItem _title="'IDS_SHIP_PARAM_TORPEDO_ALTERNATIVE_AMMO'" _value="subTorpedoAltRange" _unit="'km'" _userPrefsNum="_userPrefsNum")
		)

		(block
			(bind visible "torpedoGroupsTTX")
			(element TP_TooltipShipConfigTextItem _title="'IDS_SHIP_PARAM_TORPEDO_AMMO'" _value="subTorpedoDamage" _roundDigit=0 _userPrefsNum="_userPrefsNum")
			(element TP_TooltipShipConfigTextItem _title="'IDS_SHIP_PARAM_TORPEDO_DEEPWATER_AMMO'" _value="subTorpedoDeepwaterDamage" _roundDigit=0 _userPrefsNum="_userPrefsNum")
			(element TP_TooltipShipConfigTextItem _title="'IDS_SHIP_PARAM_TORPEDO_ALTERNATIVE_AMMO'" _value="subTorpedoAltDamage" _roundDigit=0 _userPrefsNum="_userPrefsNum")
		)

		(block
			(element TP_TooltipShipConfigTextItem _title="'IDS_SHIP_PARAM_SHOT_DELAY'" _value="torpdoReload" _unit="'s'" _userPrefsNum="_userPrefsNum")
			(element TP_TooltipShipConfigTextItem _title="'Bow Group Reload'" _value="torpdoBowReload" _unit="'s'" _userPrefsNum="_userPrefsNum")
			(element TP_TooltipShipConfigTextItem _title="'Stern Group Reload'" _value="torpdoSternReload" _unit="'s'" _userPrefsNum="_userPrefsNum")
		)

		(block
			(bind visible "torpedoGroupsTTX")
			(element TP_TooltipShipConfigTextItem _title="'Bow Group Loaders'" _value="torpdoBowLoaders" _roundDigit=0 _userPrefsNum="_userPrefsNum")
			(element TP_TooltipShipConfigTextItem _title="'Stern Group Loaders'" _value="torpdoSternLoaders" _roundDigit=0 _userPrefsNum="_userPrefsNum")
		)

		(hblock
			(bind visible "torpedoDeepwaterTTX || subTorpedoDeepwaterTTX")
			(element TP_TooltipShipConfigClassIconsItem _title="'IDS_SHIP_PARAM_TORPEDOES_AFFECTED_SHIPS'" _canHitClasses="torpedoDeepwaterCanHitClasses" _userPrefsNum="_userPrefsNum")
			(element TP_TooltipShipConfigClassIconsItem _title="'IDS_SHIP_PARAM_TORPEDOES_AFFECTED_SHIPS'" _canHitClasses="subTorpedoDeepwaterCanHitClasses" _userPrefsNum="_userPrefsNum")
		)
	)
)

(def element TP_TooltipAirDefenseItem(_shipTTX:gfx, _userPrefsNum:gfx=null)
	(scope
		(var airDefenseTTX:gfx = "_shipTTX.airDefense")

		(var integralValue:number = "airDefenseTTX ? airDefenseTTX.integralValue.value : 0")
		(var maxRange:number = "airDefenseTTX ? airDefenseTTX.averageAura.maxDist.value : null")
		(var bubble:number = "(airDefenseTTX && airDefenseTTX.bubble)  ? airDefenseTTX.bubble.numBubbles.value : null")

		(var auras:array = "airDefenseTTX ? airDefenseTTX.auras : []")
	)

	(style
		(align = "middle|center")
	)

	(bind visible "airDefenseTTX")

	(vtile
		(style
			(vgap = "TP_TOOLTIP_ELEMENTS_VGAP")
		)

		(element TP_TooltipShipConfigTitleItem _title="'IDS_SHIP_PARAM_AIR_DEFENSE'")

		(block
			(element TP_TooltipShipConfigTextItem _title="'IDS_SHIP_PARAM_AIR_DEFENSE'" _value="integralValue" _roundDigit=0 _userPrefsNum="_userPrefsNum")
		)

		(block
			(element TP_TooltipShipConfigTextItem _title="'IDS_SHIP_PARAM_MAX_DIST'" _value="maxRange" _unit="'km'" _userPrefsNum="_userPrefsNum")
			(element TP_TooltipShipConfigTextItem _title="'IDS_SHIP_PARAM_AA_EXPL_COUNT'" _value="bubble" _roundDigit=0 _userPrefsNum="_userPrefsNum")
		)

		(reverse
			(controller $Repeat renderer='TP_TooltipShipConfigTextItem'
				(bind enabled "auras.length > 0")
				(bind count "auras.length")
				(args _title="'IDS_SHIP_PARAM_AA_AVERAGE_DAMAGE_' + toUpper(auras[$index].type)" _value="auras[$index].damage.value" _roundDigit=0 _userPrefsNum="_userPrefsNum")
			)
		)
	)
)

(def element TP_TooltipAirSupportItem(_shipTTX:gfx, _userPrefsNum:gfx=null)
	(scope
		#AirSupport
		(var airSupportTTX:gfx = "_shipTTX.airSupport")
		(var range:number = "airSupportTTX ? airSupportTTX.maxDist.value : null")
		(var reload:number = "airSupportTTX ? airSupportTTX.reloadTime.value : null")
		(var numSquadrons:number = "airSupportTTX ? airSupportTTX.numSquadrons.value : null")
		(var isDepthCharge:bool = "airSupportTTX ? airSupportTTX.type == 'DEPTHCHARGE' : null")
		(var projectile:gfx = "airSupportTTX ? isDepthCharge ? airSupportTTX.bomber.bombDW : airSupportTTX.bomber.bombHE : null")
		(var damage:number = "projectile ? projectile.damage.value : null")
		(var piercing:number = "(projectile && !isDepthCharge) ? projectile.piercing.value : null")
	)

	(style
		(align = "middle|center")
	)

	(bind visible "airSupportTTX")

	(vtile
		(style
			(vgap = "TP_TOOLTIP_ELEMENTS_VGAP")
		)

		(element TP_TooltipShipConfigTitleItem _title="'IDS_SHIP_PARAM_AIR_SUPPORT'")

		(block
			(element TP_TooltipShipConfigTextItem _title="'IDS_SHIP_PARAM_MAX_DIST'" _value="range" _unit="'km'" _userPrefsNum="_userPrefsNum")
			(element TP_TooltipShipConfigTextItem _title="'IDS_SHIP_PARAM_SHOT_DELAY'" _value="reload" _unit="'s'" _userPrefsNum="_userPrefsNum")
			(element TP_TooltipShipConfigTextItem _title="'IDS_SHIP_PARAM_AIR_SUPPORT_NUM_SQUADRONS'" _value="numSquadrons" _roundDigit=0 _unit=null _userPrefsNum="_userPrefsNum")

			(element TP_TooltipShipConfigTextItem _title="'IDS_SHIP_PARAM_DAMAGE'" _value="damage" _unit=null _roundDigit=0 _userPrefsNum="_userPrefsNum")
			(element TP_TooltipShipConfigTextItem _title="'IDS_SHIP_PARAM_ARTILLERY_ALPHA_PIERCING'" _value="piercing" _roundDigit=0 _unit="'mm'" _userPrefsNum="_userPrefsNum")
		)
	)
)

(def element TP_TooltipDepthChargeItem(_shipTTX:gfx, _userPrefsNum:gfx=null)
	(scope
		#AirSupport
		(var depthChargesTTX:gfx = "_shipTTX.depthCharges")
		(var numCharges:number = "depthChargesTTX ? depthChargesTTX.numCharges.value : null")
		(var numBombs:number = "depthChargesTTX ? depthChargesTTX.numBombs.value : null")
		(var reload:number = "depthChargesTTX ? depthChargesTTX.reloadTime.value : null")
		(var damage:number = "depthChargesTTX ? depthChargesTTX.damage.value : null")
	)

	(style
		(align = "middle|center")
	)

	(bind visible "depthChargesTTX")

	(vtile
		(style
			(vgap = "TP_TOOLTIP_ELEMENTS_VGAP")
		)

		(element TP_TooltipShipConfigTitleItem _title="'IDS_SHIP_PARAM_DEPTH_CHARGE'")

		(block
			(element TP_TooltipShipConfigTextItem _title="'IDS_SHIP_PARAM_SHOT_DELAY'" _value="reload" _unit="'s'" _userPrefsNum="_userPrefsNum")
			(element TP_TooltipShipConfigTextItem _title="'IDS_SHIP_PARAM_DAMAGE'" _value="damage" _unit=null _roundDigit=0 _userPrefsNum="_userPrefsNum")
			(element TP_TooltipShipConfigTextItem _title="'IDS_SHIP_PARAM_DEPTH_CHARGE_MAX_PACKS'" _value="numCharges" _roundDigit=0 _unit=null _userPrefsNum="_userPrefsNum")
			(element TP_TooltipShipConfigTextItem _title="'IDS_SHIP_PARAM_DEPTH_CHARGE_NUM_BOMBS_IN_PACK'" _value="numBombs" _roundDigit=0 _unit=null _userPrefsNum="_userPrefsNum")
		)
	)
)

(def element TP_TooltipMobilityItem(_shipTTX:gfx, _userPrefsNum:gfx=null)
	(scope
		#surface speed
		(var mobilityTTX:gfx = "_shipTTX.mobility")
		(var surfaceSpeed:number = "mobilityTTX ? mobilityTTX.speed.value : null")

		#underwater speed
		(var underwaterMobilityTTX:gfx = "_shipTTX.underwaterMobility")
		(var underwaterSpeed:number = "underwaterMobilityTTX ? underwaterMobilityTTX.speed.value : null")
	)

	(style
		(align = "middle|center")
	)

	(bind visible "mobilityTTX || underwaterMobilityTTX")

	(vtile
		(style
			(vgap = "TP_TOOLTIP_ELEMENTS_VGAP")
		)

		(element TP_TooltipShipConfigTitleItem _title="'IDS_SHIP_PARAM_MAXSPEED'")

		(block
			(element TP_TooltipShipConfigTextItem _title="'IDS_SHIP_PARAM_MOBILITY'" _value="surfaceSpeed" _unit="'kts'" _userPrefsNum="_userPrefsNum")
			(element TP_TooltipShipConfigTextItem _title="'IDS_SHIP_PARAM_UNDERWATER_MOBILITY'" _value="underwaterSpeed" _unit="'kts'" _userPrefsNum="_userPrefsNum")
		)
	)
)

(def element TP_TooltipVisibilityItem(_shipTTX:gfx, _avatarEntity:gfx, _isRealParams:bool, _userPrefsNum:gfx=null)
	(scope
		#fix for skill---------------------
		(var avatarComponent:gfx = "_avatarEntity ? _avatarEntity.avatar : null")
		(var selfPlayer:gfx = "$datahub.getSingleEntity(CC.playerAvatar)")

		#shipId -> ownShip (ship in port) -> crewId (crew on board) -> crewSkill (check crew has skill)
		(var isSelf:bool = "selfPlayer ? selfPlayer.avatar.id == avatarComponent.id : false")
		(var shipId:number = "avatarComponent ? avatarComponent.ship.ref.ship.id : null" (event "avatarComponent.evShipRefChanged"))
		(var shipType:str = "avatarComponent ? avatarComponent.shipType : null" (event "avatarComponent.evShipTypeChanged"))
		(var ownShipEntity:gfx = "$datahub.getPrimaryEntity(CC.ownShip, shipId)")

		(var skillId:number = "shipType in TP_CONCEALMENT_SKILL_ID ? TP_CONCEALMENT_SKILL_ID[shipType] : null")
		(var skillEntity:gfx = "$datahub.getPrimaryCompositeEntity(CC.skill, skillId, shipType, TP_CONCEALMENT_CREW_ID)")
		
		(var crewId:number = "ownShipEntity ? ownShipEntity.ownShip.crewId : null" (event "ownShipEntity.ownShip.evCrewChanged"))
		(var crewSkillEntity:gfx = "$datahub.getPrimaryCompositeEntity(CC.crewSkill, crewId, skillEntity.id)")
		#(crewId, skill) -> rutrns crewSkill if the crew is onboard and has skill

		(var isCorrectionNeeded:bool = "!(crewSkillEntity || isSelf || _isRealParams)")

		(var modifiers:dict = "skillEntity ? skillEntity.attributes.modifiers : null")
		(var visibilityModifier:number = "isCorrectionNeeded && modifiers ? (1 + modifiers.visibilityDistCoeff * 0.01) : 1.0") #value is negative and %
		#---------------------

		(var visibilityTTX:gfx = "_shipTTX.visibility")
		(var visibilityByShip:number = "visibilityTTX ? visibilityTTX.visibilityByShip.normal.value : null") #CAPTAIN SKILL FIX
		(var visibilityByPlane:number = "visibilityTTX ? visibilityTTX.visibilityByPlane.normal.value : null") #CAPTAIN SKILL FIX

		#fix------------------
		(var modifiedVisibilityByShip:number = "visibilityByShip * visibilityModifier") #CAPTAIN SKILL FIX
		(var modifiedVisibilityByPlane:number = "visibilityByPlane * visibilityModifier") #CAPTAIN SKILL FIX
		#---------------------
	)

	(style
		(align = "middle|center")
	)

	(bind visible "visibilityTTX")

	(vtile
		(style
			(vgap = "TP_TOOLTIP_ELEMENTS_VGAP")
		)

		(element TP_TooltipShipConfigTitleItem _title="'IDS_SHIP_PARAM_DETECTION'")

		(block
			(element TP_TooltipShipConfigTextItem _title="'IDS_SHIP_PARAM_VISIBILITY_DIST_BY_SHIP'" _value="modifiedVisibilityByShip" _unit="'km'" _userPrefsNum="_userPrefsNum")
			(element TP_TooltipShipConfigTextItem _title="'IDS_SHIP_PARAM_VISIBILITY_DIST_BY_PLANE'" _value="modifiedVisibilityByPlane" _unit="'km'" _userPrefsNum="_userPrefsNum")
		)
	)
)

(def element TP_TooltipConsumableItem(_shipBattleInfo:gfx, _userPrefsNum:gfx=null)
	(scope
		(var mainConsumables:array = "_shipBattleInfo.mainConsumables")
		(var altConsumables:array = "_shipBattleInfo.altConsumables")
	)
	(style
		(width = 100%)
	)
	(element ShipInfoConsumables
		_title = "altConsumables.length > 0 ? 'IDS_SHIP_INFO_MAIN_CONSUMABLES_OPTIONAL' : 'IDS_SHIP_INFO_MAIN_CONSUMABLES'"
		_items = "mainConsumables"
		_extraItems = "altConsumables"
		_iconSize = "45"
		_isSimple = true
		(bind visible "mainConsumables.length != 0 || altConsumables.length != 0")
	)
)

(def element TP_TooltipShipConfigTitleItem (_title:str, _userPrefsNum:gfx=null)
	(scope
	)

	(bind visible "_title")
	(style
		(marginBottom = 2px)
		#(width = 45px)
		#(bind width "isUnitVisible ? TP_SHIPCONFIG_ELEMENT_WIDTH.WITH_UNIT : TP_SHIPCONFIG_ELEMENT_WIDTH.NO_UNIT")
		(align = "center|middle")
	)
	(hblock
		(style
			#(marginRight = "XS")
		)
		(tf
			(class $TextDefaultBoldNM)
			(style
				(marginRight = "XS")
			)
			(bind text "_title")
		)
	)
)

(def element TP_TooltipShipConfigTextItem (_title:str, _value:number, _unit:str=null, _showZero:bool=false, _roundDigit:number="1.0", _userPrefsNum:gfx=null)
	(scope
		(var isValueVisible:bool = "_value || _showZero")
	)

	(style
		(marginBottom = 5px)
		(marginLeft = 20px)
	)
	(bind visible "isValueVisible")
	(hblock
		(style
			(marginRight = "XS")
			(align = "middle|center")
		)
		(tf
			(class $TextDefaultNM)
			(style
				(marginRight = "XS")
				(width = 200)
				(leading = -4px)
			)
			(bind text "tr(_title) + ': '")
		)
		(tf
			(class $TextDefaultNM)
			(style
				(marginRight = "XS")
			)
			(bind text "isValueVisible ? formatFloatingPoint(_value, _roundDigit) : ''")
		)
		(tf
			(bind visible "_unit")
			(class $TextDefaultNM)
			(bind text "_unit")
			(alpha = "TC")
			(style
				(width = "30px")
			)
		)
	)
)

(def element TP_TooltipShipConfigClassIconsItem (_title:str, _canHitClasses:array, _userPrefsNum:gfx=null)
	(scope
		(var isVisible:bool = "_canHitClasses && _canHitClasses.length > 0")
	)

	(style
		(marginBottom = 5px)
		(marginLeft = 20px)
	)
	(bind visible "isVisible")
	(hblock
		(style
			(align = "middle|center")
		)
		(tf
			(class $TextDefaultNM)
			(style
				(marginRight = "XS")
				(width = 180px)
				(leading = -4px)
			)
			(bind text "tr(_title) + ': '")
		)
		(controller $Repeat renderer='TP_ClassIconItem'
			(bind enabled "isVisible")
			(bind count "_canHitClasses.length")
			(args _className="_canHitClasses[$index]")
		)
	)
)

(def element TP_ClassIconItem (_className:str) layout=true
	(style
		(width = 27px) (height = 0px) (marginTop = -25px)
		(bind backgroundImage "'url:../service_kit/ship_classes/icon_default_' + toLower(_className) + '.png'")
	)
)

#--------------------------------------------------------------------------------
#Macros
#--------------------------------------------------------------------------------
(def macro TP_GET_ISAFK ()
	# Returns isAFK:bool
	#
	# Entity
	(macro IS_SPECTATOR_MODE)
	(var avatarComponent:gfx = "_entity && _entity.hasComponent(CC.avatar) ? _entity.avatar : null")
	(var relationComponent:gfx = "_entity && _entity.hasComponent(CC.relation) ? _entity.relation : null")
	(var healthComponent:gfx = "_entity && _entity.hasComponent(CC.health) ? _entity.health : null")
	# Vars
	(var relationValue:number = "relationComponent ? relationComponent.value : -1" (event "relationComponent.evChanged"))
	(var tkStatus:bool = "avatarComponent && avatarComponent.tkStatus" (event "avatarComponent.evTeamkillStatusChanged")) # Necessary!
	(var isSelf:bool = "relationValue == SC.Battle.PLAYER_RELATION.SELF")
	(var isAlive:bool = "healthComponent ? healthComponent.isAlive : true" (event "healthComponent.evIsAliveChanged"))
	(var isBot:bool = "avatarComponent ? avatarComponent.isBot : true")
	(var isLoadedInBattle:bool = "avatarComponent ? avatarComponent.isLoadedInBattle : true" (event "avatarComponent.evIsLoadedInBattleChanged"))
	(var isAFK:bool = "isAlive && !isSpectatorTrainingMode && !isSelf && !isBot && !isLoadedInBattle")
)

(def macro TP_GET_USERPREFS ()
	(var userPrefsComponent:gfx = "$datahub.getSingleComponent(CC.userPrefs)")
	(var _userPrefsNum:gfx = "userPrefsComponent.userPrefs.chatBoxWidth" watch=false (event "userPrefsComponent.evUserPrefsChanged"))
	# NEVER. EVER. Cast userPrefs to dict type because it will literally freezes the game
)

(def macro TP_GET_PREF_NUMBER (_varName:expression, _pref:expression)
	(var name="_varName" type=number value="_userPrefsNum && isNumber(_userPrefsNum[_pref.KEY]) ? _pref.OFFSET + (round(_userPrefsNum[_pref.KEY]) * _pref.MODIFIER) : _pref.DEFAULT")
)

(def macro TP_GET_PREF_BOOL (_varName:expression, _pref:expression)
	(var name="_varName" type=bool value="_userPrefsNum && isNumber(_userPrefsNum[_pref.KEY]) ? round(_userPrefsNum[_pref.KEY]) : _pref.DEFAULT")
)

(def macro TP_TOOLTIP_BEHAVIOUR (_isAlly:expression = false)

	(bindcall show animation =	{	duration:	"0.3",
									delay:		"0.3",
									easing:		"Easing.cubic_out",
									from:		{ alpha: 0, top: 5 },
									to:			{ alpha: 1, top: 0 }
								}
								on = 'rollOver'
	)

	(bindcall hide animation = {	duration:	"0.05",
									delay:		"0",
									easing:		"Easing.cubic_out",
									from:		{ alpha: 1, top: 0 },
									to:			{ alpha: 0, top: -5}
								}
								on = 'rollOut'
	)

	(offset = {	x: 35, y: 15})

	(screenBoundsOffset = {			left:	10,
									top:	10,
									right:	10,
									bottom:	10 })
	
	(priority = "0")

	(bind align "_isAlly ? right|middle : left|middle")
	(position="trackMouse")
)

(def macro TP_BIND_BLURINTENSITY(_blurIntensity:expression="0.3")
	(controller $Animation
		(bindcall play  duration="0.0001"
						to	 = "{ blurIntensity: _blurIntensity }"
						watch=false
						init=true
						(bind trigger "_blurIntensity")
		)
	)
)

(def macro TP_GET_MARKER_DATA (_entity:expression)
	(var avatarComponent:gfx = "_entity ? _entity.avatar : null")
	(var divisionMemberComponent:gfx = "_entity ? _entity.divisionMember : null")
	(var subType:str = "avatarComponent ? avatarComponent.shipType : ''" (event "avatarComponent.evShipTypeChanged"))
	(var shipType:str = "toLower(subType)")
	(var relationComponent:gfx = "_entity ? _entity.relation : null")
	(var isSelf:bool = "relationComponent && relationComponent.value == SC.Battle.PLAYER_RELATION.SELF" (event "relationComponent.evChanged"))
	(var isAlly:bool = "relationComponent && relationComponent.value == SC.Battle.PLAYER_RELATION.ALLY" (event "relationComponent.evChanged"))
	(var isEnemy:bool = "relationComponent && relationComponent.value == SC.Battle.PLAYER_RELATION.ENEMY" (event "relationComponent.evChanged"))
	(var isAlive:bool = "_entity && _entity.hasComponent(CC.health) && _entity.health.isAlive" (event "_entity.health.evIsAliveChanged") (event "_entity.evAdded"))
	(var tkStatus:bool = "avatarComponent && avatarComponent.tkStatus" (event "avatarComponent.evTeamkillStatusChanged"))
	(var isInSameDivision:bool = "divisionMemberComponent && divisionMemberComponent.isInSameDivision" (event "divisionMemberComponent.evDivisionChanged"))
	(var isGolden:bool = "isInSameDivision || isSelf")
)